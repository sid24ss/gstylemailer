(lp1
ccopy_reg
_reconstructor
p2
(c__main__
GStyleGuide
p3
c__builtin__
object
p4
NtRp5
(dp6
S'body'
p7
S'\n<h2 class="ignoreLink" id="Background">Background</h2>\n\n\n<p>C++ is the main development language  used by\nmany of Google\'s open-source projects. As every C++\nprogrammer knows, the language has many powerful features, but\nthis power brings with it complexity, which in turn can make\ncode more bug-prone and harder to read and maintain.</p>\n\n\n<p>The goal of this guide is to manage this complexity by\ndescribing in detail the dos and don\'ts of writing C++ code.\nThese rules exist to\nkeep  the code base manageable while still allowing\ncoders to use C++ language features productively.</p>\n\n\n<p><em>Style</em>, also known as readability, is what we call\nthe conventions that govern our C++ code. The term Style is a\nbit of a misnomer, since these conventions cover far more than\njust source file formatting.</p>\n\n\n<p>One way in which we keep the code base manageable is by\nenforcing <em>consistency</em>.  It is very\nimportant that any \nprogrammer be able to look at\nanother\'s code and quickly understand it. Maintaining a uniform\nstyle and following conventions means that we can more easily\nuse "pattern-matching" to infer what various symbols are and\nwhat invariants are true about them. Creating common, required\nidioms and patterns makes code much easier to understand. In\nsome cases there might be good arguments for changing certain\nstyle rules, but we nonetheless keep things as they are in\norder to preserve consistency.</p>\n\n\n<p>Another issue this guide addresses is that of C++ feature\nbloat. C++ is a huge language with many advanced features. In\nsome cases we constrain, or even ban, use of certain features.\nWe do this to keep code simple and to avoid the various common\nerrors and problems that these features can cause. This guide\nlists these features and explains why their use is\nrestricted.</p>\n\n\n<p> Open-source projects\ndeveloped by Google conform to the requirements in this\nguide.</p>\n\n\n<p>Note that this guide is not a C++ tutorial: we assume that\nthe reader is familiar with the language. </p>\n\n'
p8
sbag2
(g3
g4
NtRp9
(dp10
g7
S'\n<h2 id="Header_Files">Header Files</h2>\n\n\n<p>In general, every <code>.cc</code> file should have an\nassociated <code>.h</code> file. There are some common\nexceptions, such as  unittests and\nsmall <code>.cc</code> files containing just a\n<code>main()</code> function.</p>\n\n\n<p>Correct use of header files can make a huge difference to\nthe readability, size and performance of your code.</p>\n\n\n<p>The following rules will guide you through the various\npitfalls of using header files.</p>\n\n\n<a id="The_-inl.h_Files"></a>\n\n\n<h3 id="Self_contained_Headers">Self-contained Headers</h3>\n\n\n<div class="summary">\n<p>Header files should be self-contained and end in <code>.h</code>. Files that\nare meant for textual inclusion, but are not headers, should end in\n<code>.inc</code>. Separate <code>-inl.h</code> headers are disallowed.</p>\n</div>\n\n\n<div class="stylebody">\n<p>All header files should be self-contained. In other\nwords, users and refactoring tools should not have to adhere to special\nconditions in order to include the header. Specifically, a\nheader should have <a href="#The__define_Guard">header guards</a>,\nshould include all other headers it needs, and should not require any\nparticular symbols to be defined.</p>\n<p>There are rare cases where a file is not meant to be self-contained, but\ninstead is meant to be textually included at a specific point in the code.\nExamples are files that need to be included multiple times or\nplatform-specific extensions that essentially are part of other headers. Such\nfiles should use the file extension <code>.inc</code>.</p>\n<p>If a template or inline function is declared in a <code>.h</code> file,\ndefine it in that same file. The definitions of these constructs must\nbe included into every <code>.cc</code> file that uses them, or the\nprogram may fail to link in some build configurations. Do not move these\ndefinitions to separate <code>-inl.h</code> files.</p>\n<p>As an exception, a function template that is explicitly\ninstantiated for all relevant sets of template arguments, or\nthat is a private member of a class, may\nbe defined in the only <code>.cc</code> file that\ninstantiates the template.</p>\n</div>\n\n'
p11
sbag2
(g3
g4
NtRp12
(dp13
g7
S'\n<h3 id="The__define_Guard">The #define Guard</h3>\n\n\n<div class="summary">\n<p>All header files should have <code>#define</code> guards to\nprevent multiple inclusion. The format of the symbol name\nshould be\n<code><i>&lt;PROJECT&gt;</i>_<i>&lt;PATH&gt;</i>_<i>&lt;FILE&gt;</i>_H_</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>To guarantee uniqueness, they should\nbe based on the full path in a project\'s source tree. For\nexample, the file <code>foo/src/bar/baz.h</code> in\nproject <code>foo</code> should have the following\nguard:</p>\n<pre>#ifndef FOO_BAR_BAZ_H_\n#define FOO_BAR_BAZ_H_\n\n...\n\n#endif  // FOO_BAR_BAZ_H_\n</pre>\n</div>\n\n'
p14
sbag2
(g3
g4
NtRp15
(dp16
g7
S'\n<h3 id="Forward_Declarations">Forward Declarations</h3>\n\n\n<div class="summary">\n<p>You may forward declare ordinary classes in order to avoid\nunnecessary <code>#include</code>s.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>A "forward declaration" is a declaration of a class,\nfunction, or template without an associated definition.\n<code>#include</code> lines can often be replaced with\nforward declarations of whatever symbols are actually\nused by the client code.</p>\n</div>\n<div class="pros">\n<ul>\n<li>Unnecessary <code>#include</code>s force the\n  compiler to open more files and process more\n  input.</li>\n<li>They can also force your code to be recompiled more\n  often, due to changes in the header.</li>\n</ul>\n</div>\n<div class="cons">\n<ul>\n<li>It can be difficult to determine the correct form\n  of a forward declaration in the presence of features\n  like templates, typedefs, default parameters, and using\n  declarations.</li>\n<li>It can be difficult to determine whether a forward\n  declaration or a full <code>#include</code> is needed\n  for a given piece of code, particularly when implicit\n  conversion operations are involved. In extreme cases,\n  replacing an <code>#include</code> with a forward\n  declaration can silently change the meaning of\n  code.</li>\n<li>Forward declaring multiple symbols from a header\n  can be more verbose than simply\n  <code>#include</code>ing the header.</li>\n<li>Forward declarations of functions and templates can\n  prevent the header owners from making\n  otherwise-compatible changes to their APIs; for\n  example, widening a parameter type, or adding a\n  template parameter with a default value.</li>\n<li>Forward declaring symbols from namespace\n  <code>std::</code> usually yields undefined\n  behavior.</li>\n<li>Structuring code to enable forward declarations\n  (e.g. using pointer members instead of object members)\n  can make the code slower and more complex.</li>\n<li>The practical efficiency benefits of forward\n  declarations are unproven.</li>\n</ul>\n</div>\n<div class="decision">\n<ul>\n<li>When using a function declared in a header file,\n  always <code>#include</code> that header.</li>\n<li>When using a class template, prefer to\n  <code>#include</code> its header file.</li>\n<li>When using an ordinary class, relying on a forward\n  declaration is OK, but be wary of situations where a\n  forward declaration may be insufficient or incorrect;\n  when in doubt, just <code>#include</code> the\n  appropriate header.</li>\n<li>Do not replace data members with pointers just to\n  avoid an <code>#include</code>.</li>\n</ul>\n<p>Please see <a href="#Names_and_Order_of_Includes">Names and Order\nof Includes</a> for rules about when to #include a header.</p>\n</div>\n</div>\n\n'
p17
sbag2
(g3
g4
NtRp18
(dp19
g7
S'\n<h3 id="Inline_Functions">Inline Functions</h3>\n\n\n<div class="summary">\n<p>Define functions inline only when they are small, say, 10\nlines or less.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>You can declare functions in a way that allows the compiler to expand\nthem inline rather than calling them through the usual\nfunction call mechanism.</p>\n</div>\n<div class="pros">\n<p>Inlining a function can generate more efficient object\ncode, as long as the inlined function is small. Feel free\nto inline accessors and mutators, and other short,\nperformance-critical functions.</p>\n</div>\n<div class="cons">\n<p>Overuse of inlining can actually make programs slower.\nDepending on a function\'s size, inlining it can cause the\ncode size to increase or decrease. Inlining a very small\naccessor function will usually decrease code size while\ninlining a very large function can dramatically increase\ncode size. On modern processors smaller code usually runs\nfaster due to better use of the instruction cache.</p>\n</div>\n<div class="decision">\n<p>A decent rule of thumb is to not inline a function if\nit is more than 10 lines long. Beware of destructors,\nwhich are often longer than they appear because of\nimplicit member- and base-destructor calls!</p>\n<p>Another useful rule of thumb: it\'s typically not cost\neffective to inline functions with loops or switch\nstatements (unless, in the common case, the loop or\nswitch statement is never executed).</p>\n<p>It is important to know that functions are not always\ninlined even if they are declared as such; for example,\nvirtual and recursive functions are not normally inlined.\nUsually recursive functions should not be inline. The\nmain reason for making a virtual function inline is to\nplace its definition in the class, either for convenience\nor to document its behavior, e.g., for accessors and\nmutators.</p>\n</div>\n</div>\n\n'
p20
sbag2
(g3
g4
NtRp21
(dp22
g7
S'\n<h3 id="Function_Parameter_Ordering">Function Parameter Ordering</h3>\n\n\n<div class="summary">\n<p>When defining a function, parameter order is: inputs, then\noutputs.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Parameters to C/C++ functions are either input to the\nfunction, output from the function, or both. Input\nparameters are usually values or <code>const</code>\nreferences, while output and input/output parameters will\nbe non-<code>const</code> pointers. When ordering\nfunction parameters, put all input-only parameters before\nany output parameters. In particular, do not add new\nparameters to the end of the function just because they\nare new; place new input-only parameters before the\noutput parameters.</p>\n<p>This is not a hard-and-fast rule. Parameters that are\nboth input and output (often classes/structs) muddy the\nwaters, and, as always, consistency with related\nfunctions may require you to bend the rule.</p>\n</div>\n\n'
p23
sbag2
(g3
g4
NtRp24
(dp25
g7
S'\n<h3 id="Names_and_Order_of_Includes">Names and Order of Includes</h3>\n\n\n<div class="summary">\n<p>Use standard order for readability and to avoid hidden\ndependencies: Related header, C library, C++ library,  other libraries\'\n<code>.h</code>, your project\'s <code>.h</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>\nAll of a project\'s header files should be\nlisted as descendants of the project\'s source\ndirectory without use of UNIX directory shortcuts\n<code>.</code> (the current directory) or <code>..</code>\n(the parent directory). For example,\n\n<code>google-awesome-project/src/base/logging.h</code>\nshould be included as:</p>\n<pre>#include "base/logging.h"\n</pre>\n<p>In <code><var>dir/foo</var>.cc</code> or\n<code><var>dir/foo_test</var>.cc</code>, whose main\npurpose is to implement or test the stuff in\n<code><var>dir2/foo2</var>.h</code>, order your includes\nas follows:</p>\n<ol>\n<li><code><var>dir2/foo2</var>.h</code>.</li>\n<li>C system files.</li>\n<li>C++ system files.</li>\n<li>Other libraries\' <code>.h</code>\n  files.</li>\n<li>\n  Your project\'s <code>.h</code>\n  files.</li>\n</ol>\n<p>With the preferred ordering, if\n<code><var>dir2/foo2</var>.h</code> omits any necessary\nincludes, the build of <code><var>dir/foo</var>.cc</code>\nor <code><var>dir/foo</var>_test.cc</code> will break.\nThus, this rule ensures that build breaks show up first\nfor the people working on these files, not for innocent\npeople in other packages.</p>\n<p><code><var>dir/foo</var>.cc</code> and\n<code><var>dir2/foo2</var>.h</code> are usually in the same\ndirectory (e.g. <code>base/basictypes_test.cc</code> and\n<code>base/basictypes.h</code>), but may sometimes be in different\ndirectories too.</p>\n<p>Within each section the includes should be ordered\nalphabetically. Note that older code might not conform to\nthis rule and should be fixed when convenient.</p>\n<p>You should include all the headers that define the symbols you rely\nupon (except in cases of <a href="#Forward_Declarations">forward\ndeclaration</a>). If you rely on symbols from <code>bar.h</code>,\ndon\'t count on the fact that you included <code>foo.h</code> which\n(currently) includes <code>bar.h</code>: include <code>bar.h</code>\nyourself, unless <code>foo.h</code> explicitly demonstrates its intent\nto provide you the symbols of <code>bar.h</code>.  However, any\nincludes present in the related header do not need to be included\nagain in the related <code>cc</code> (i.e., <code>foo.cc</code> can\nrely on <code>foo.h</code>\'s includes).</p>\n<p>For example, the includes in\n\n<code>google-awesome-project/src/foo/internal/fooserver.cc</code>\nmight look like this:</p>\n<pre>#include "foo/server/fooserver.h"\n\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;hash_map&gt;\n#include &lt;vector&gt;\n\n#include "base/basictypes.h"\n#include "base/commandlineflags.h"\n#include "foo/server/bar.h"\n</pre>\n<p class="exception">Sometimes, system-specific code needs\nconditional includes. Such code can put conditional\nincludes after other includes. Of course, keep your\nsystem-specific code small and localized. Example:</p>\n<pre>#include "foo/public/fooserver.h"\n\n#include "base/port.h"  // For LANG_CXX11.\n\n#ifdef LANG_CXX11\n#include &lt;initializer_list&gt;\n#endif  // LANG_CXX11\n</pre>\n</div>\n\n'
p26
sbag2
(g3
g4
NtRp27
(dp28
g7
S'\n<h2 id="Scoping">Scoping</h2>\n\n\n<h3 id="Namespaces">Namespaces</h3>\n\n\n<div class="summary">\n<p>Unnamed namespaces in <code>.cc</code> files are\nencouraged. With named namespaces, choose the name based on\nthe \nproject, and possibly its\npath. Do not use a <i>using-directive</i>.\nDo not use inline namespaces.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>Namespaces subdivide the global scope\ninto distinct, named scopes, and so are useful for preventing\nname collisions in the global scope.</p>\n</div>\n<div class="pros">\n<p>Namespaces provide a (hierarchical) axis of naming, in\naddition to the (also hierarchical) name axis provided by\nclasses.</p>\n<p>For example, if two different projects have a class\n<code>Foo</code> in the global scope, these symbols may\ncollide at compile time or at runtime. If each project\nplaces their code in a namespace,\n<code>project1::Foo</code> and <code>project2::Foo</code>\nare now distinct symbols that do not collide.</p>\n<p>Inline namespaces automatically place their names in\nthe enclosing scope. Consider the following snippet, for\nexample:</p>\n<pre>namespace X {\ninline namespace Y {\n  void foo();\n}\n}\n</pre>\n<p>The expressions <code>X::Y::foo()</code> and\n<code>X::foo()</code> are interchangeable. Inline\nnamespaces are primarily intended for ABI compatibility\nacross versions.</p>\n</div>\n<div class="cons">\n<p>Namespaces can be confusing, because they provide an\nadditional (hierarchical) axis of naming, in addition to\nthe (also hierarchical) name axis provided by\nclasses.</p>\n<p>Inline namespaces, in particular, can be confusing\nbecause names aren\'t actually restricted to the namespace\nwhere they are declared. They are only useful as part of\nsome larger versioning policy.</p>\n<p>Use of unnamed namespaces in header files can easily\ncause violations of the C++ One Definition Rule\n(ODR).</p>\n</div>\n<div class="decision">\n<p>Use namespaces according to the policy described\nbelow. Terminate namespaces with comments as shown in the\ngiven examples.</p>\n</div>\n<h4 class="stylepoint_subsection">Unnamed Namespaces</h4>\n<ul>\n<li>\n<p>Unnamed namespaces are allowed and even encouraged\n  in <code>.cc</code> files, to avoid link time naming\n  conflicts:</p>\n<pre>namespace {                           // This is in a .cc file.\n\n// The content of a namespace is not indented.\n//\n// This function is guaranteed not to generate a colliding symbol\n// with other symbols at link time, and is only visible to\n// callers in this .cc file.\nbool UpdateInternals(Frobber* f, int newval) {\n  ...\n}\n\n}  // namespace\n</pre>\n<p>However, file-scope declarations that are\n  associated with a particular class may be declared in\n  that class as types, static data members or static\n  member functions rather than as members of an unnamed\n  namespace.</p>\n</li>\n<li>Do not use unnamed namespaces in <code>.h</code>\n  files.</li>\n</ul>\n<h4 class="stylepoint_subsection">Named Namespaces</h4>\n<p>Named namespaces should be used as follows:</p>\n<ul>\n<li>\n<p>Namespaces wrap the entire source file after\n  includes,  \n  <a href="http://google-gflags.googlecode.com/">\n  gflags</a> definitions/declarations, and\n  forward declarations of classes from other namespaces:</p>\n<pre>// In the .h file\nnamespace mynamespace {\n\n// All declarations are within the namespace scope.\n// Notice the lack of indentation.\nclass MyClass {\n public:\n  ...\n  void Foo();\n};\n\n}  // namespace mynamespace\n</pre>\n<pre>// In the .cc file\nnamespace mynamespace {\n\n// Definition of functions is within scope of the namespace.\nvoid MyClass::Foo() {\n  ...\n}\n\n}  // namespace mynamespace\n</pre>\n<p>The typical <code>.cc</code> file might have more\n  complex detail, including the need to reference\n  classes in other namespaces.</p>\n<pre>#include "a.h"\n\nDEFINE_bool(someflag, false, "dummy flag");\n\nclass C;  // Forward declaration of class C in the global namespace.\nnamespace a { class A; }  // Forward declaration of a::A.\n\nnamespace b {\n\n...code for b...         // Code goes against the left margin.\n\n}  // namespace b\n</pre>\n</li>\n<li>Do not declare anything in namespace\n  <code>std</code>, not even forward declarations of\n  standard library classes. Declaring entities in\n  namespace <code>std</code> is undefined behavior, i.e.,\n  not portable. To declare entities from the standard\n  library, include the appropriate header file.</li>\n<li><p>You may not use a <i>using-directive</i>\n  to make all names from a namespace available.</p>\n<pre class="badcode">// Forbidden -- This pollutes the namespace.\nusing namespace foo;\n</pre>\n</li>\n<li><p>You may use a <i>using-declaration</i>\n  anywhere in a <code>.cc</code> file, and in functions,\n  methods or classes in <code>.h</code> files.</p>\n<pre>// OK in .cc files.\n// Must be in a function, method or class in .h files.\nusing ::foo::bar;\n</pre>\n</li>\n<li><p>Namespace aliases are allowed anywhere in a <code>\n  .cc</code> file, anywhere inside the named namespace\n  that wraps an entire <code>.h</code> file, and in\n  functions and methods.</p>\n<pre>// Shorten access to some commonly used names in .cc files.\nnamespace fbz = ::foo::bar::baz;\n\n// Shorten access to some commonly used names (in a .h file).\nnamespace librarian {\n// The following alias is available to all files including\n// this header (in namespace librarian):\n// alias names should therefore be chosen consistently\n// within a project.\nnamespace pd_s = ::pipeline_diagnostics::sidetable;\n\ninline void my_inline_function() {\n  // namespace alias local to a function (or method).\n  namespace fbz = ::foo::bar::baz;\n  ...\n}\n}  // namespace librarian\n</pre>\n<p>Note that an alias in a .h file is visible to\n  everyone #including that file, so public headers\n  (those available outside a project) and headers\n  transitively #included by them, should avoid defining\n  aliases, as part of the general goal of keeping\n  public APIs as small as possible.</p>\n</li>\n<li>Do not use inline namespaces.</li>\n</ul>\n</div>\n\n'
p29
sbag2
(g3
g4
NtRp30
(dp31
g7
S'\n<h3 id="Nested_Classes">Nested Classes</h3>\n\n\n<div class="summary">\n<p>Although you may use public nested classes when they are\npart of an interface, consider a <a href="#Namespaces">namespace</a>\nto keep declarations out of the global scope.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>A class can define another class within it; this is also\ncalled a <i>member class</i>.</p>\n<pre>class Foo {\n\n private:\n  // Bar is a member class, nested within Foo.\n  class Bar {\n    ...\n  };\n\n};\n</pre>\n</div>\n<div class="pros">\n<p>This is useful when the nested (or member) class is only\nused by the enclosing class; making it a member puts it\nin the enclosing class scope rather than polluting the\nouter scope with the class name. Nested classes can be\nforward declared within the enclosing class and then\ndefined in the <code>.cc</code> file to avoid including\nthe nested class definition in the enclosing class\ndeclaration, since the nested class definition is usually\nonly relevant to the implementation.</p>\n</div>\n<div class="cons">\n<p>Nested classes can be forward-declared only within the\ndefinition of the enclosing class. Thus, any header file\nmanipulating a <code>Foo::Bar*</code> pointer will have\nto include the full class declaration for\n<code>Foo</code>.</p>\n</div>\n<div class="decision">\n<p>Do not make nested classes public unless they are\nactually part of the interface, e.g., a class that holds a\nset of options for some method. </p>\n</div>\n</div>\n\n'
p32
sbag2
(g3
g4
NtRp33
(dp34
g7
S'\n<h3 id="Nonmember,_Static_Member,_and_Global_Functions">Nonmember, Static Member, and Global Functions</h3>\n\n\n<div class="summary">\n<p>Prefer nonmember functions within a namespace or static\nmember functions to global functions; use completely global\nfunctions rarely.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="pros">\n<p>Nonmember and static member functions can be useful in\n some situations. Putting nonmember functions in a\n namespace avoids polluting the global namespace.</p>\n</div>\n<div class="cons">\n<p>Nonmember and static member functions may make more sense\nas members of a new class, especially if they access\nexternal resources or have significant dependencies.</p>\n</div>\n<div class="decision">\n<p>Sometimes it is useful, or even necessary, to define a\nfunction not bound to a class instance. Such a function\ncan be either a static member or a nonmember function.\nNonmember functions should not depend on external\nvariables, and should nearly always exist in a namespace.\nRather than creating classes only to group static member\nfunctions which do not share static data, use\n<a href="#Namespaces">namespaces</a> instead.</p>\n<p>Functions defined in the same compilation unit as\nproduction classes may introduce unnecessary coupling and\nlink-time dependencies when directly called from other\ncompilation units; static member functions are\nparticularly susceptible to this. Consider extracting a\nnew class, or placing the functions in a namespace\npossibly in a separate library.</p>\n<p>If you must define a nonmember function and it is only\nneeded in its <code>.cc</code> file, use an unnamed\n<a href="#Namespaces">namespace</a> or\n<code>static</code> linkage (eg <code>static int Foo()\n{...}</code>) to limit its scope.</p>\n</div>\n</div>\n\n'
p35
sbag2
(g3
g4
NtRp36
(dp37
g7
S'\n<h3 id="Local_Variables">Local Variables</h3>\n\n\n<div class="summary">\n<p>Place a function\'s variables in the narrowest scope\npossible, and initialize variables in the declaration.</p>\n</div>\n\n\n<div class="stylebody">\n<p>C++ allows you to declare variables anywhere in a\nfunction. We encourage you to declare them in as local a\nscope as possible, and as close to the first use as\npossible. This makes it easier for the reader to find the\ndeclaration and see what type the variable is and what it\nwas initialized to. In particular, initialization should\nbe used instead of declaration and assignment, e.g.:</p>\n<pre class="badcode">int i;\ni = f();      // Bad -- initialization separate from declaration.\n</pre>\n<pre>int j = g();  // Good -- declaration has initialization.\n</pre>\n<pre class="badcode">vector&lt;int&gt; v;\nv.push_back(1);  // Prefer initializing using brace initialization.\nv.push_back(2);\n</pre>\n<pre>vector&lt;int&gt; v = {1, 2};  // Good -- v starts initialized.\n</pre>\n<p>Variables needed for <code>if</code>, <code>while</code>\nand <code>for</code> statements should normally be declared\nwithin those statements, so that such variables are confined\nto those scopes.  E.g.:</p>\n<pre>while (const char* p = strchr(str, \'/\')) str = p + 1;\n</pre>\n<p>There is one caveat: if the variable is an object, its\nconstructor is invoked every time it enters scope and is\ncreated, and its destructor is invoked every time it goes\nout of scope.</p>\n<pre class="badcode">// Inefficient implementation:\nfor (int i = 0; i &lt; 1000000; ++i) {\n  Foo f;  // My ctor and dtor get called 1000000 times each.\n  f.DoSomething(i);\n}\n</pre>\n<p>It may be more efficient to declare such a variable\nused in a loop outside that loop:</p>\n<pre>Foo f;  // My ctor and dtor get called once each.\nfor (int i = 0; i &lt; 1000000; ++i) {\n  f.DoSomething(i);\n}\n</pre>\n</div>\n\n'
p38
sbag2
(g3
g4
NtRp39
(dp40
g7
S'\n<h3 id="Static_and_Global_Variables">Static and Global Variables</h3>\n\n\n<div class="summary">\n<p>Static or global variables of class type are forbidden:\nthey cause hard-to-find bugs due to indeterminate order of\nconstruction and destruction. However, such variables are\nallowed if they are <code>constexpr</code>: they have no\ndynamic initialization or destruction.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Objects with static storage duration, including global\nvariables, static variables, static class member\nvariables, and function static variables, must be Plain\nOld Data (POD): only ints, chars, floats, or pointers, or\narrays/structs of POD.</p>\n<p>The order in which class constructors and initializers\nfor static variables are called is only partially\nspecified in C++ and can even change from build to build,\nwhich can cause bugs that are difficult to find.\nTherefore in addition to banning globals of class type,\nwe do not allow static POD variables to be initialized\nwith the result of a function, unless that function (such\nas getenv(), or getpid()) does not itself depend on any\nother globals. (This prohibition does not apply to a static\nvariable within function scope, since its initialization\norder is well-defined and does not occur until control\npasses through its declaration.)</p>\n<p>Likewise, global and static variables are destroyed\nwhen the program terminates, regardless of whether the\ntermination is by returning from <code>main()</code> or\nby calling <code>exit()</code>. The order in which\ndestructors are called is defined to be the reverse of\nthe order in which the constructors were called. Since\nconstructor order is indeterminate, so is destructor\norder. For example, at program-end time a static variable\nmight have been destroyed, but code still running\n\xe2\x80\x94 perhaps in another thread\n\xe2\x80\x94 tries to access it and fails. Or the\ndestructor for a static <code>string</code> variable\nmight be run prior to the destructor for another variable\nthat contains a reference to that string.</p>\n<p>One way to alleviate the destructor problem is to\nterminate the program by calling\n<code>quick_exit()</code> instead of <code>exit()</code>.\nThe difference is that <code>quick_exit()</code> does not\ninvoke destructors and does not invoke any handlers that\nwere registered by calling <code>atexit()</code>. If you\nhave a handler that needs to run when a program\nterminates via <code>quick_exit()</code> (flushing logs,\nfor example), you can register it using\n<code>at_quick_exit()</code>. (If you have a handler that\nneeds to run at both <code>exit()</code> and\n<code>quick_exit()</code>, you need to register it in\nboth places.)</p>\n<p>As a result we only allow static variables to contain\nPOD data. This rule completely disallows\n<code>vector</code> (use C arrays instead), or\n<code>string</code> (use <code>const char []</code>).</p>\n<p>If you need a static or global\nvariable of a class type, consider initializing a pointer\n(which will never be freed), from either your main()\nfunction or from pthread_once(). Note that this must be a\nraw pointer, not a "smart" pointer, since the smart\npointer\'s destructor will have the order-of-destructor\nissue that we are trying to avoid.</p>\n</div>\n\n'
p41
sbag2
(g3
g4
NtRp42
(dp43
g7
S'\n<h2 id="Classes">Classes</h2>\n\n\n<p>Classes are the fundamental unit of code in C++. Naturally,\nwe use them extensively. This section lists the main dos and\ndon\'ts you should follow when writing a class.</p>\n\n\n<h3 id="Doing_Work_in_Constructors">Doing Work in Constructors</h3>\n\n\n<div class="summary">\n<p>Avoid doing complex initialization in constructors (in\nparticular, initialization that can fail or that requires\nvirtual method calls).</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>It is possible to perform initialization in the body\nof the constructor.</p>\n</div>\n<div class="pros">\n<p>Convenience in typing. No need to worry about whether the\nclass has been initialized or not.</p>\n</div>\n<div class="cons">\n<p>The problems with doing work in constructors are:</p>\n<ul>\n<li>There is no easy way for constructors to signal\n  errors, short of using exceptions (which are\n  <a href="#Exceptions">forbidden</a>).</li>\n<li>If the work fails, we now have an object whose\n  initialization code failed, so it may be an\n  indeterminate state.</li>\n<li>If the work calls virtual functions, these calls\n  will not get dispatched to the subclass\n  implementations. Future modification to your class can\n  quietly introduce this problem even if your class is\n  not currently subclassed, causing much confusion.</li>\n<li>If someone creates a global variable of this type\n  (which is against the rules, but still), the\n  constructor code will be called before\n  <code>main()</code>, possibly breaking some implicit\n  assumptions in the constructor code. For instance,\n  \n  \n  <a href="http://google-gflags.googlecode.com/">gflags</a>\n  will not yet have been initialized.</li>\n</ul>\n</div>\n<div class="decision">\n<p>Constructors should never call virtual functions or\nattempt to raise non-fatal failures. If your object requires\nnon-trivial initialization, consider using\n a factory function or <code>Init()</code>\nmethod.</p>\n</div>\n</div>\n\n'
p44
sbag2
(g3
g4
NtRp45
(dp46
g7
S'\n<h3 id="Initialization">Initialization</h3>\n\n\n<div class="summary">\n<p>If your class defines member variables, you must provide an\nin-class initializer for every member variable or write a\nconstructor (which can be a default constructor). If you do\nnot declare any constructors yourself then the compiler\nwill generate a default constructor for you, which may\nleave some fields uninitialized or initialized to\ninappropriate values.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>The default constructor is called when we\n<code>new</code> a class object with no arguments. It is always\ncalled when calling <code>new[]</code> (for arrays). In-class\nmember initialization means declaring a member variable using a\nconstruction like <code>int count_ = 17;</code> or\n<code>string name_{"abc"};</code>, as opposed to just\n<code>int count_;</code> or <code>string name_;</code>.</p>\n</div>\n<div class="pros">\n<p>A user-defined default constructor is used to\ninitialize an object if no initializer is provided. It\ncan ensure that an object is always in a valid and usable\nstate as soon as it\'s constructed; it can also ensure\nthat an object is initially created in an obviously\n"impossible" state, to aid debugging.</p>\n<p>In-class member initialization ensures that a member\nvariable will be initialized appropriately without having\nto duplicate the initialization code in multiple\nconstructors. This can reduce bugs where you add a new\nmember variable, initialize it in one constructor, and\nforget to put that initialization code in another\nconstructor.</p>\n</div>\n<div class="cons">\n<p>Explicitly defining a default constructor is extra\nwork for you, the code writer.</p>\n<p>In-class member initialization is potentially\nconfusing if a member variable is initialized as part of\nits declaration and also initialized in a constructor,\nsince the value in the constructor will override the\nvalue in the declaration.</p>\n</div>\n<div class="decision">\n<p>Use in-class member initialization for simple\ninitializations, especially when a member variable must\nbe initialized the same way in more than one\nconstructor.</p>\n<p>If your class defines member variables that aren\'t\ninitialized in-class, and if it has no other\nconstructors, you must define a default constructor (one\nthat takes no arguments). It should preferably initialize\nthe object in such a way that its internal state is\nconsistent and valid.</p>\n<p>The reason for this is that if you have no other\nconstructors and do not define a default constructor, the\ncompiler will generate one for you. This compiler\ngenerated constructor may not initialize your object\nsensibly.</p>\n<p>If your class inherits from an existing class but you\nadd no new member variables, you are not required to have\na default constructor. </p>\n</div>\n</div>\n\n'
p47
sbag2
(g3
g4
NtRp48
(dp49
g7
S'\n<h3 id="Explicit_Constructors">Explicit Constructors</h3>\n\n\n<div class="summary">\n<p>Use the C++ keyword <code>explicit</code> for constructors\ncallable with one argument.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Normally, if a\nconstructor can be called with one argument, it can be used as a\nconversion. For instance, if you define\n<code>Foo::Foo(string name)</code> and then pass a string\nto a function that expects a <code>Foo</code>, the\nconstructor will be called to convert the string into a\n<code>Foo</code> and will pass the <code>Foo</code> to\nyour function for you. This can be convenient but is also\na source of trouble when things get converted and new\nobjects created without you meaning them to. Declaring a\nconstructor <code>explicit</code> prevents it from being\ninvoked implicitly as a conversion.</p>\n<p>In addition to single-parameter constructors, this also\napplies to constructors where every parameter after the\nfirst has a default value, e.g.,\n<code>Foo::Foo(string name, int id = 42)</code>.</p>\n</div>\n<div class="pros">\n<p>Avoids undesirable conversions.</p>\n</div>\n<div class="cons">\n<p>None.</p>\n</div>\n<div class="decision">\n<p>We require all constructors that are callable with\na single argument to be\nexplicit. Always put <code>explicit</code> in front of\nsuch constructors in the class definition:\n<code>explicit Foo(string name);</code></p>\n<p>Copy and move constructors are exceptions: they should not be\n<code>explicit</code>.  Classes that are intended to be transparent\nwrappers around other classes are also exceptions.\nSuch exceptions should be clearly marked with\ncomments.</p>\n<p>Finally, constructors that take only a\n<code>std::initializer_list</code> may be non-explicit. This permits\nconstruction of your type from a <a href="#Braced_Initializer_List">braced initializer list</a>, as in an assignment-style initialization,\nfunction argument, or return statement. For example:</p>\n<pre>  MyType m = {1, 2};\n  MyType MakeMyType() { return {1, 2}; }\n  TakeMyType({1, 2});\n</pre>\n</div>\n</div>\n\n'
p50
sbag2
(g3
g4
NtRp51
(dp52
g7
S'\n<h3 id="Copyable_Movable_Types">Copyable and Movable Types</h3>\n\n\n<a id="Copy_Constructors"></a>\n\n\n<div class="summary">\n<p>Support copying and/or moving if it makes sense for your type.\nOtherwise, disable the implicitly generated special\nfunctions that perform copies and moves.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>A copyable type allows its objects to be initialized or assigned\nfrom any other object of the same type, without changing the value of the source.\nFor user-defined types, the copy behavior is defined by the copy\nconstructor and the copy-assignment operator.\n<code>string</code> is an example of a copyable type.</p>\n<p>A movable type is one that can be initialized and assigned\nfrom temporaries (all copyable types are therefore movable).\n<code>std::unique_ptr&lt;int&gt;</code> is an example of a movable but not\ncopyable type. For user-defined types, the move behavior is defined by the move\nconstructor and the move-assignment operator.</p>\n<p>The copy/move constructors can be implicitly invoked by the compiler\nin some situations, e.g. when passing objects by value.</p>\n</div>\n<div class="pros">\n<p>Objects of copyable and movable types can be passed and returned\nby value, which makes APIs simpler, safer, and more general.\nUnlike when passing pointers or references, there\'s no risk of\nconfusion over ownership, lifetime, mutability, and similar\nissues, and no need to specify them in the contract. It also\nprevents non-local interactions between the client and the\nimplementation, which makes them easier to understand and\nmaintain. Such objects can be used with generic\nAPIs that require pass-by-value, such as most containers.</p>\n<p>Copy/move constructors and assignment operators are usually\neasier to define correctly than alternatives\nlike <code>Clone()</code>, <code>CopyFrom()</code> or <code>Swap()</code>,\nbecause they can be generated by the compiler, either implicitly or\nwith <code>= default</code>.  They are concise, and ensure\nthat all data members are copied. Copy and move\nconstructors are also generally more efficient, because they don\'t\nrequire heap allocation or separate initialization and assignment\nsteps, and they\'re eligible for optimizations such as\n\n<a href="http://en.cppreference.com/w/cpp/language/copy_elision">\ncopy elision</a>.</p>\n<p>Move operations allow the implicit and efficient transfer of\nresources out of rvalue objects. This allows a plainer coding style\nin some cases.</p>\n</div>\n<div class="cons">\n<p>Many types do not need to be copyable, and providing copy\noperations for them can be confusing, nonsensical, or outright\nincorrect. Copy/assigment operations for base class types are\nhazardous, because use of them can lead to\n<a href="http://en.wikipedia.org/wiki/Object_slicing">object\nslicing</a>. Defaulted or carelessly-implemented copy operations\ncan be incorrect, and the resulting bugs can be confusing and\ndifficult to diagnose.</p>\n<p>Copy constructors are invoked implicitly, which makes the\ninvocation easy to miss. This may cause confusion, particularly\nfor programmers used to languages where pass-by-reference is\nconventional or mandatory. It may also encourage excessive\ncopying, which can cause performance problems.</p>\n</div>\n<div class="decision">\n<p>Make your type copyable/movable if it will be useful, and if it\nmakes sense in the context of the rest of the API.\nAs a rule of thumb, if the behavior (including computational\ncomplexity) of a copy isn\'t immediately obvious to users of your type,\nyour type shouldn\'t be copyable.  If you choose to make it copyable,\ndefine both copy operations (constructor and assignment).  If your\ntype is copyable and a move operation is more efficient than a copy,\ndefine both move operations (constructor and assignment).\nIf your type is not copyable, but the correctness of a move is obvious\nto users of the type and its fields support it, you may make the type\nmove-only by defining both of the move operations.\n</p>\n<p>Prefer to define copy and move operations with <code>= default</code>.\nDefining non-default move operations currently requires a style\nexception. Remember to review the correctness of any defaulted\noperations as you would any other code.\n</p>\n<p>Due to the risk of slicing, avoid providing an assignment\noperator or public copy/move constructor for a class that\'s\nintended to be derived from (and avoid deriving from a class\nwith such members). If your base class needs to be\ncopyable, provide a public virtual <code>Clone()</code>\nmethod, and a protected copy constructor that derived classes\ncan use to implement it.</p>\n<p>If you do not want to support copy/move operations on\nyour type, explicitly disable them using <code>= delete</code> or\nwhatever\nother mechanism your project uses.\n\n</p></div>\n</div>\n\n'
p53
sbag2
(g3
g4
NtRp54
(dp55
g7
S'\n<h3 id="Delegating_and_inheriting_constructors">Delegating and Inheriting Constructors</h3>\n\n\n<div class="summary">\n<p> Use delegating and inheriting\nconstructors when they reduce code duplication.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>Delegating and inheriting constructors are two\ndifferent features, both introduced in C++11, for\nreducing code duplication in constructors. Delegating\nconstructors allow one of a class\'s constructors to\nforward work to one of the class\'s other constructors,\nusing a special variant of the initialization list\nsyntax. For example:</p>\n<pre>X::X(const string&amp; name) : name_(name) {\n  ...\n}\n\nX::X() : X("") { }\n</pre>\n<p>Inheriting constructors allow a derived class to have\nits base class\'s constructors available directly, just as\nwith any of the base class\'s other member functions,\ninstead of having to redeclare them. This is especially\nuseful if the base has multiple constructors. For\nexample:</p>\n<pre>class Base {\n public:\n  Base();\n  Base(int n);\n  Base(const string&amp; s);\n  ...\n};\n\nclass Derived : public Base {\n public:\n  using Base::Base;  // Base\'s constructors are redeclared here.\n};\n</pre>\n<p>This is especially useful when <code>Derived</code>\'s\nconstructors don\'t have to do anything more than calling\n<code>Base</code>\'s constructors.</p>\n</div>\n<div class="pros">\n<p>Delegating and inheriting constructors reduce\nverbosity and boilerplate, which can improve\nreadability.</p>\n<p>Delegating constructors are familiar to Java\nprogrammers.</p>\n</div>\n<div class="cons">\n<p>It\'s possible to approximate the behavior of\ndelegating constructors by using a helper function.</p>\n<p>Inheriting constructors may be confusing if a derived\nclass introduces new member variables, since the base\nclass constructor doesn\'t know about them.</p>\n</div>\n<div class="decision">\n<p>Use delegating and inheriting constructors when they reduce\nboilerplate and improve readability.\nBe cautious about inheriting constructors when your derived class has\nnew member variables. Inheriting constructors may still be appropriate\nin that case if you can use in-class member initialization\nfor the derived class\'s member variables.</p>\n</div>\n</div>\n\n'
p56
sbag2
(g3
g4
NtRp57
(dp58
g7
S'\n<h3 id="Structs_vs._Classes">Structs vs. Classes</h3>\n\n\n<div class="summary">\n<p>Use a <code>struct</code> only for passive objects that\n      carry data; everything else is a <code>class</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>The <code>struct</code> and <code>class</code>\nkeywords behave almost identically in C++. We add our own\nsemantic meanings to each keyword, so you should use the\nappropriate keyword for the data-type you\'re\ndefining.</p>\n<p><code>structs</code> should be used for passive\nobjects that carry data, and may have associated\nconstants, but lack any functionality other than\naccess/setting the data members. The accessing/setting of\nfields is done by directly accessing the fields rather\nthan through method invocations. Methods should not\nprovide behavior but should only be used to set up the\ndata members, e.g., constructor, destructor,\n<code>Initialize()</code>, <code>Reset()</code>,\n<code>Validate()</code>.</p>\n<p>If more functionality is required, a\n<code>class</code> is more appropriate. If in doubt, make\nit a <code>class</code>.</p>\n<p>For consistency with STL, you can use\n<code>struct</code> instead of <code>class</code> for\nfunctors and traits.</p>\n<p>Note that member variables in structs and classes have\n<a href="#Variable_Names">different naming rules</a>.</p>\n</div>\n\n'
p59
sbag2
(g3
g4
NtRp60
(dp61
g7
S'\n<h3 id="Inheritance">Inheritance</h3>\n\n\n<div class="summary">\n<p>Composition is often more appropriate than inheritance.\nWhen using inheritance, make it <code>public</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> When a sub-class\ninherits from a base class, it includes the definitions\nof all the data and operations that the parent base class\ndefines. In practice, inheritance is used in two major\nways in C++: implementation inheritance, in which actual\ncode is inherited by the child, and\n<a href="#Interfaces">interface inheritance</a>, in which\nonly method names are inherited.</p>\n</div>\n<div class="pros">\n<p>Implementation inheritance reduces code size by re-using\nthe base class code as it specializes an existing type.\nBecause inheritance is a compile-time declaration, you\nand the compiler can understand the operation and detect\nerrors. Interface inheritance can be used to\nprogrammatically enforce that a class expose a particular\nAPI. Again, the compiler can detect errors, in this case,\nwhen a class does not define a necessary method of the\nAPI.</p>\n</div>\n<div class="cons">\n<p>For implementation inheritance, because the code\nimplementing a sub-class is spread between the base and\nthe sub-class, it can be more difficult to understand an\nimplementation. The sub-class cannot override functions\nthat are not virtual, so the sub-class cannot change\nimplementation. The base class may also define some data\nmembers, so that specifies physical layout of the base\nclass.</p>\n</div>\n<div class="decision">\n<p>All inheritance should be <code>public</code>. If you\nwant to do private inheritance, you should be including\nan instance of the base class as a member instead.</p>\n<p>Do not overuse implementation inheritance. Composition\nis often more appropriate. Try to restrict use of\ninheritance to the "is-a" case: <code>Bar</code>\nsubclasses <code>Foo</code> if it can reasonably be said\nthat <code>Bar</code> "is a kind of"\n<code>Foo</code>.</p>\n<p>Make your destructor <code>virtual</code> if\nnecessary. If your class has virtual methods, its\ndestructor  should be virtual.</p>\n<p>Limit the use of <code>protected</code> to those\nmember functions that might need to be accessed from\nsubclasses. Note that <a href="#Access_Control">data\nmembers should be private</a>.</p>\n<p>Explicitly annotate overrides of virtual functions\nor virtual destructors with an <code>override</code>\nor (less frequently) <code>final</code> specifier.\nOlder (pre-C++11) code will use the\n<code>virtual</code> keyword as an inferior\nalternative annotation. For clarity, use exactly one of\n<code>override</code>, <code>final</code>, or\n<code>virtual</code> when declaring an override.\nRationale: A function or destructor marked\n<code>override</code> or <code>final</code> that is\nnot an override of a base class virtual function will\nnot compile, and this helps catch common errors. The\nspecifiers serve as documentation; if no specifier is\npresent, the reader has to check all ancestors of the\nclass in question to determine if the function or\ndestructor is virtual or not.</p>\n</div>\n</div>\n\n'
p62
sbag2
(g3
g4
NtRp63
(dp64
g7
S'\n<h3 id="Multiple_Inheritance">Multiple Inheritance</h3>\n\n\n<div class="summary">\n<p>Only very rarely is multiple implementation inheritance\nactually useful. We allow multiple inheritance only when at\nmost one of the base classes has an implementation; all\nother base classes must be <a href="#Interfaces">pure\ninterface</a> classes tagged with the\n<code>Interface</code> suffix.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>Multiple inheritance allows a sub-class to have more than\none base class. We distinguish between base classes that are\n<em>pure interfaces</em> and those that have an\n<em>implementation</em>.</p>\n</div>\n<div class="pros">\n<p>Multiple implementation inheritance may let you re-use\neven more code than single inheritance (see <a href="#Inheritance">Inheritance</a>).</p>\n</div>\n<div class="cons">\n<p>Only very rarely is multiple <em>implementation</em>\ninheritance actually useful. When multiple implementation\ninheritance seems like the solution, you can usually find\na different, more explicit, and cleaner solution.</p>\n</div>\n<div class="decision">\n<p> Multiple inheritance is allowed only when all\nsuperclasses, with the possible exception of the first one,\nare <a href="#Interfaces">pure interfaces</a>. In order to\nensure that they remain pure interfaces, they must end with\nthe <code>Interface</code> suffix.</p>\n</div>\n<div class="note">\n<p>There is an <a href="#Windows_Code">exception</a> to\nthis rule on Windows.</p>\n</div>\n</div>\n\n'
p65
sbag2
(g3
g4
NtRp66
(dp67
g7
S'\n<h3 id="Interfaces">Interfaces</h3>\n\n\n<div class="summary">\n<p>Classes that satisfy certain conditions are allowed, but\nnot required, to end with an <code>Interface</code> suffix.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>A class is a pure interface if it meets the following\nrequirements:</p>\n<ul>\n<li>It has only public pure virtual ("<code>=\n  0</code>") methods and static methods (but see below\n  for destructor).</li>\n<li>It may not have non-static data members.</li>\n<li>It need not have any constructors defined. If a\n  constructor is provided, it must take no arguments and\n  it must be protected.</li>\n<li>If it is a subclass, it may only be derived from\n  classes that satisfy these conditions and are tagged\n  with the <code>Interface</code> suffix.</li>\n</ul>\n<p>An interface class can never be directly instantiated\nbecause of the pure virtual method(s) it declares. To\nmake sure all implementations of the interface can be\ndestroyed correctly, the interface must also declare a\nvirtual destructor (in an exception to the first rule,\nthis should not be pure). See Stroustrup, <cite>The C++\nProgramming Language</cite>, 3rd edition, section 12.4\nfor details.</p>\n</div>\n<div class="pros">\n<p>Tagging a class with the <code>Interface</code> suffix\nlets others know that they must not add implemented\nmethods or non static data members. This is particularly\nimportant in the case of <a href="#Multiple_Inheritance">multiple inheritance</a>.\nAdditionally, the interface concept is already\nwell-understood by Java programmers.</p>\n</div>\n<div class="cons">\n<p>The <code>Interface</code> suffix lengthens the class\nname, which can make it harder to read and understand.\nAlso, the interface property may be considered an\nimplementation detail that shouldn\'t be exposed to\nclients.</p>\n</div>\n<div class="decision">\n<p>A class may end\nwith <code>Interface</code> only if it meets the above\nrequirements. We do not require the converse, however:\nclasses that meet the above requirements are not required\nto end with <code>Interface</code>.</p>\n</div>\n</div>\n\n'
p68
sbag2
(g3
g4
NtRp69
(dp70
g7
S'\n<h3 id="Operator_Overloading">Operator Overloading</h3>\n\n\n<div class="summary">\n<p> Do not overload operators except in rare, special\ncircumstances. Do not create user-defined literals.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> A class can\ndefine that operators such as <code>+</code> and\n<code>/</code> operate on the class as if it were a\nbuilt-in type. An overload of <code>operator""</code>\nallows the built-in literal syntax to be used to create\nobjects of class types.</p>\n</div>\n<div class="pros">\n<p>Operator overloading can make code appear more\nintuitive because a class will behave in the same way as\nbuilt-in types (such as <code>int</code>). Overloaded\noperators are more playful names for functions that are\nless-colorfully named, such as <code>Equals()</code> or\n<code>Add()</code>.</p>\n<p>For some template functions to work correctly, you may\nneed to define operators.</p>\n<p>User-defined literals are a very concise notation for\ncreating objects of user-defined types.</p>\n</div>\n<div class="cons">\n<p>While operator overloading can make code more intuitive,\nit has several drawbacks:</p>\n<ul>\n<li>It can fool our intuition into thinking that\n  expensive operations are cheap, built-in\n  operations.</li>\n<li>It is much harder to find the call sites for\n  overloaded operators. Searching for\n  <code>Equals()</code> is much easier than searching for\n  relevant invocations of <code>==</code>.</li>\n<li>Some operators work on pointers too, making it easy\n  to introduce bugs. <code>Foo + 4</code> may do one\n  thing, while <code>&amp;Foo + 4</code> does something\n  totally different. The compiler does not complain for\n  either of these, making this very hard to debug.</li>\n<li>User-defined literals allow creating new syntactic\n  forms that are unfamiliar even to experienced C++\n  programmers.</li>\n</ul>\n<p>Overloading also has surprising ramifications. For\ninstance, if a class overloads unary\n<code>operator&amp;</code>, it cannot safely be\nforward-declared.</p>\n</div>\n<div class="decision">\n<p>In general, do not overload operators. You can define\nordinary functions like <code>Equals()</code> if\nyou need them. Likewise, avoid the dangerous unary\n<code>operator&amp;</code> at all costs, if there\'s any\npossibility the class might be forward-declared.</p>\n<p>Do not overload <code>operator""</code>, i.e. do not\nintroduce user-defined literals.</p>\n<p>However, there may be rare cases where you need to\noverload an operator to interoperate with templates or\n"standard" C++ classes (such as\n<code>operator&lt;&lt;(ostream&amp;, const T&amp;)</code>\nfor logging). These are acceptable if fully justified, but you should try to avoid these\nwhenever possible. In particular, do not overload\n<code>operator==</code> or <code>operator&lt;</code> just\nso that your class can be used as a key in an STL\ncontainer; instead, you should create equality and\ncomparison functor types when declaring the\ncontainer.</p>\n<p>Some of the STL algorithms do require you to overload\n<code>operator==</code>, and you may do so in these\ncases, provided you document why.</p>\n<p>See also <a href="#Copyable_Movable_Types">Copyable and Movable\nTypes</a> and <a href="#Function_Overloading">Function Overloading</a>.</p>\n</div>\n</div>\n\n'
p71
sbag2
(g3
g4
NtRp72
(dp73
g7
S'\n<h3 id="Access_Control">Access Control</h3>\n\n\n<div class="summary">\n<p> Make data members <code>private</code>, and provide access\nto them through accessor functions as needed (for technical\nreasons, we allow data members of a test fixture class to\nbe <code>protected</code> when using\n\n\n<a href="http://code.google.com/p/googletest/">Google\nTest</a>). Typically a variable would be called\n<code>foo_</code> and the accessor function\n<code>foo()</code>. You may also want a mutator function\n<code>set_foo()</code>. Exception: <code>static\nconst</code> data members (typically called\n<code>kFoo</code>) need not be <code>private</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>The definitions of accessors are usually inlined in\nthe header file.</p>\n<p>See also <a href="#Inheritance">Inheritance</a> and\n<a href="#Function_Names">Function Names</a>.</p>\n</div>\n\n'
p74
sbag2
(g3
g4
NtRp75
(dp76
g7
S'\n<h3 id="Declaration_Order">Declaration Order</h3>\n\n\n<div class="summary">\n<p> Use the specified order of declarations within a class:\n<code>public:</code> before <code>private:</code>, methods\nbefore data members (variables), etc.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Your class definition should start with its\n<code>public:</code> section, followed by its\n<code>protected:</code> section and then its\n<code>private:</code> section. If any of these sections\nare empty, omit them.</p>\n<p>Within each section, the declarations generally should\nbe in the following order:</p>\n<ul>\n<li>Typedefs and Enums</li>\n<li>Constants (<code>static const</code> data\n  members)</li>\n<li>Constructors</li>\n<li>Destructor</li>\n<li>Methods, including static methods</li>\n<li>Data Members (except <code>static const</code> data\n  members)</li>\n</ul>\n<p>Friend declarations should always be in the private\nsection. If copying and assignment are disabled with a macro\nsuch as <code>DISALLOW_COPY_AND_ASSIGN</code>, it should be\nat the end of the <code>private:</code> section, and should be\nthe last thing in the class. See\n<a href="#Copyable_Movable_Types">Copyable and Movable Types</a>.</p>\n<p>Method definitions in the corresponding\n<code>.cc</code> file should be the same as the\ndeclaration order, as much as possible.</p>\n<p>Do not put large method definitions inline in the\nclass definition. Usually, only trivial or\nperformance-critical, and very short, methods may be\ndefined inline. See <a href="#Inline_Functions">Inline\nFunctions</a> for more details.</p>\n</div>\n\n'
p77
sbag2
(g3
g4
NtRp78
(dp79
g7
S'\n<h3 id="Write_Short_Functions">Write Short Functions</h3>\n\n\n<div class="summary">\n<p>Prefer small and focused functions.</p>\n</div>\n\n\n<div class="stylebody">\n<p>We recognize that long functions are sometimes\nappropriate, so no hard limit is placed on functions\nlength. If a function exceeds about 40 lines, think about\nwhether it can be broken up without harming the structure\nof the program.</p>\n<p>Even if your long function works perfectly now,\nsomeone modifying it in a few months may add new\nbehavior. This could result in bugs that are hard to\nfind. Keeping your functions short and simple makes it\neasier for other people to read and modify your code.</p>\n<p>You could find long and complicated functions when\nworking with \nsome code. Do not be\nintimidated by modifying existing code: if working with\nsuch a function proves to be difficult, you find that\nerrors are hard to debug, or you want to use a piece of\nit in several different contexts, consider breaking up\nthe function into smaller and more manageable pieces.</p>\n</div>\n\n'
p80
sbag2
(g3
g4
NtRp81
(dp82
g7
S'\n<h2 id="Google-Specific_Magic">Google-Specific Magic</h2>\n\n\n<p>There are various tricks and utilities that\nwe use to make C++ code more robust, and various ways we use\nC++ that may differ from what you see elsewhere.</p>\n\n\n<h3 id="Ownership_and_Smart_Pointers">Ownership and Smart Pointers</h3>\n\n\n<div class="summary">\n<p>Prefer to have single, fixed owners for dynamically\nallocated objects. Prefer to transfer ownership with smart\npointers.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>"Ownership" is a bookkeeping technique for managing\ndynamically allocated memory (and other resources). The\nowner of a dynamically allocated object is an object or\nfunction that is responsible for ensuring that it is\ndeleted when no longer needed. Ownership can sometimes be\nshared, in which case the last owner is typically\nresponsible for deleting it. Even when ownership is not\nshared, it can be transferred from one piece of code to\nanother.</p>\n<p>"Smart" pointers are classes that act like pointers,\ne.g. by overloading the <code>*</code> and\n<code>-&gt;</code> operators. Some smart pointer types\ncan be used to automate ownership bookkeeping, to ensure\nthese responsibilities are met.\n<a href="http://www.google.com/url?sa=D&amp;q=http://en.cppreference.com/w/cpp/memory/unique_ptr">\n<code>std::unique_ptr</code></a> is a smart pointer type\nintroduced in C++11, which expresses exclusive ownership\nof a dynamically allocated object; the object is deleted\nwhen the <code>std::unique_ptr</code> goes out of scope.\nIt cannot be copied, but can be <em>moved</em> to\nrepresent ownership transfer.\n<a href="http://www.google.com/url?sa=D&amp;q=http://en.cppreference.com/w/cpp/memory/shared_ptr">\n<code>std::shared_ptr</code></a> is a smart pointer type\nthat expresses shared ownership of\na dynamically allocated object. <code>std::shared_ptr</code>s\ncan be copied; ownership of the object is shared among\nall copies, and the object is deleted when the last\n<code>std::shared_ptr</code> is destroyed. </p>\n</div>\n<div class="pros">\n<ul>\n<li>It\'s virtually impossible to manage dynamically\n  allocated memory without some sort of ownership\n  logic.</li>\n<li>Transferring ownership of an object can be cheaper\n  than copying it (if copying it is even possible).</li>\n<li>Transferring ownership can be simpler than\n  \'borrowing\' a pointer or reference, because it reduces\n  the need to coordinate the lifetime of the object\n  between the two users.</li>\n<li>Smart pointers can improve readability by making\n  ownership logic explicit, self-documenting, and\n  unambiguous.</li>\n<li>Smart pointers can eliminate manual ownership\n  bookkeeping, simplifying the code and ruling out large\n  classes of errors.</li>\n<li>For const objects, shared ownership can be a simple\n  and efficient alternative to deep copying.</li>\n</ul>\n</div>\n<div class="cons">\n<ul>\n<li>Ownership must be represented and transferred via\n  pointers (whether smart or plain). Pointer semantics\n  are more complicated than value semantics, especially\n  in APIs: you have to worry not just about ownership,\n  but also aliasing, lifetime, and mutability, among\n  other issues.</li>\n<li>The performance costs of value semantics are often\n  overestimated, so the performance benefits of ownership\n  transfer might not justify the readability and\n  complexity costs.</li>\n<li>APIs that transfer ownership force their clients\n  into a single memory management model.</li>\n<li>Code using smart pointers is less explicit about\n  where the resource releases take place.</li>\n<li><code>std::unique_ptr</code> expresses ownership\n  transfer using C++11\'s move semantics, which are\n  relatively new and may confuse some programmers.</li>\n<li>Shared ownership can be a tempting alternative to\n  careful ownership design, obfuscating the design of a\n  system.</li>\n<li>Shared ownership requires explicit bookkeeping at\n  run-time, which can be costly.</li>\n<li>In some cases (e.g. cyclic references), objects\n  with shared ownership may never be deleted.</li>\n<li>Smart pointers are not perfect substitutes for\n  plain pointers.</li>\n</ul>\n</div>\n<div class="decision">\n<p>If dynamic allocation is necessary, prefer to keep\nownership with the code that allocated it. If other code\nneeds access to the object, consider passing it a copy,\nor passing a pointer or reference without transferring\nownership. Prefer to use <code>std::unique_ptr</code> to\nmake ownership transfer explicit. For example:</p>\n<pre>std::unique_ptr&lt;Foo&gt; FooFactory();\nvoid FooConsumer(std::unique_ptr&lt;Foo&gt; ptr);\n</pre>\n<p>Do not design your code to use shared ownership\nwithout a very good reason. One such reason is to avoid\nexpensive copy operations, but you should only do this if\nthe performance benefits are significant, and the\nunderlying object is immutable (i.e.\n<code>std::shared_ptr&lt;const Foo&gt;</code>).  If you\ndo use shared ownership, prefer to use\n<code>std::shared_ptr</code>.</p>\n<p>Do not use <code>scoped_ptr</code> in new code unless\nyou need to be compatible with older versions of C++.\nNever use <code>std::auto_ptr</code>. Instead, use\n<code>std::unique_ptr</code>.</p>\n</div>\n</div>\n\n'
p83
sbag2
(g3
g4
NtRp84
(dp85
g7
S'\n<h3 id="cpplint">cpplint</h3>\n\n\n<div class="summary">\n<p>Use <code>cpplint.py</code>\nto detect style errors.</p>\n</div>\n\n\n<div class="stylebody">\n<p><code>cpplint.py</code>\nis a tool that reads a source file and identifies many\nstyle errors. It is not perfect, and has both false\npositives and false negatives, but it is still a valuable\ntool. False positives can be ignored by putting <code>//\nNOLINT</code> at the end of the line or\n<code>// NOLINTNEXTLINE</code> in the previous line.</p>\n<p>Some projects have instructions on\nhow to run <code>cpplint.py</code> from their project\ntools. If the project you are contributing to does not,\nyou can download\n<a href="http://google-styleguide.googlecode.com/svn/trunk/cpplint/cpplint.py">\n<code>cpplint.py</code></a> separately.</p>\n</div>\n\n'
p86
sbag2
(g3
g4
NtRp87
(dp88
g7
S'\n<h2 id="Other_C++_Features">Other C++ Features</h2>\n\n\n<h3 id="Reference_Arguments">Reference Arguments</h3>\n\n\n<div class="summary">\n<p>All parameters passed by reference must be labeled\n<code>const</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>In C, if a\nfunction needs to modify a variable, the parameter must\nuse a pointer, eg <code>int foo(int *pval)</code>. In\nC++, the function can alternatively declare a reference\nparameter: <code>int foo(int &amp;val)</code>.</p>\n</div>\n<div class="pros">\n<p>Defining a parameter as reference avoids ugly code like\n<code>(*pval)++</code>. Necessary for some applications\nlike copy constructors. Makes it clear, unlike with\npointers, that a null pointer is not a possible\nvalue.</p>\n</div>\n<div class="cons">\n<p>References can be confusing, as they have value syntax\nbut pointer semantics.</p>\n</div>\n<div class="decision">\n<p>Within function parameter lists all references must be\n<code>const</code>:</p>\n<pre>void Foo(const string &amp;in, string *out);\n</pre>\n<p>In fact it is a very strong convention in Google code\nthat input arguments are values or <code>const</code>\nreferences while output arguments are pointers. Input\nparameters may be <code>const</code> pointers, but we\nnever allow non-<code>const</code> reference parameters\nexcept when required by convention, e.g.,\n<code>swap()</code>.</p>\n<p>However, there are some instances where using\n<code>const T*</code> is preferable to <code>const\nT&amp;</code> for input parameters. For example:</p>\n<ul>\n<li>You want to pass in a null pointer.</li>\n<li>The function saves a pointer or reference to the\n  input.</li>\n</ul>\n<p> Remember that most of the time input\nparameters are going to be specified as <code>const\nT&amp;</code>. Using <code>const T*</code> instead\ncommunicates to the reader that the input is somehow\ntreated differently. So if you choose <code>const\nT*</code> rather than <code>const T&amp;</code>, do so\nfor a concrete reason; otherwise it will likely confuse\nreaders by making them look for an explanation that\ndoesn\'t exist.</p>\n</div>\n</div>\n\n'
p89
sbag2
(g3
g4
NtRp90
(dp91
g7
S'\n<h3 id="Rvalue_references">Rvalue References</h3>\n\n\n<div class="summary">\n<p>Use rvalue references only to define move constructors and move\nassignment operators. Do not\nuse <code>std::forward</code>.\n</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Rvalue references\nare a type of reference that can only bind to temporary\nobjects. The syntax is similar to traditional reference\nsyntax. For example, <code>void f(string&amp;&amp;\ns);</code> declares a function whose argument is an\nrvalue reference to a string.</p>\n</div>\n<div class="pros">\n<ul>\n<li>Defining a move constructor (a constructor taking\n  an rvalue reference to the class type) makes it\n  possible to move a value instead of copying it. If\n  <code>v1</code> is a <code>vector&lt;string&gt;</code>,\n  for example, then <code>auto v2(std::move(v1))</code>\n  will probably just result in some simple pointer\n  manipulation instead of copying a large amount of data.\n  In some cases this can result in a major performance\n  improvement.</li>\n<li>Rvalue references make it possible to write a\n  generic function wrapper that forwards its arguments to\n  another function, and works whether or not its\n  arguments are temporary objects.</li>\n<li>Rvalue references make it possible to implement\n  types that are movable but not copyable, which can be\n  useful for types that have no sensible definition of\n  copying but where you might still want to pass them as\n  function arguments, put them in containers, etc.</li>\n<li><code>std::move</code> is necessary to make\n  effective use of some standard-library types, such as\n  <code>std::unique_ptr</code>.</li>\n</ul>\n</div>\n<div class="cons">\n<ul>\n<li>Rvalue references are a relatively new feature\n  (introduced as part of C++11), and not yet widely\n  understood. Rules like reference collapsing, and\n  automatic synthesis of move constructors, are\n  complicated.</li>\n</ul>\n</div>\n<div class="decision">\n<p>Use rvalue references only to define move constructors and move\nassignment operators, as described in\n<a href="#Copyable_Movable_Types">Copyable and Movable Types</a>.\nDo not use <code>std::forward</code> utility function. You may\nuse <code>std::move</code> to express moving a value from one object\nto another rather than copying it. </p>\n</div>\n</div>\n\n'
p92
sbag2
(g3
g4
NtRp93
(dp94
g7
S'\n<h3 id="Function_Overloading">Function Overloading</h3>\n\n\n<div class="summary">\n<p>Use overloaded functions (including constructors) only if a\nreader looking at a call site can get a good idea of what\nis happening without having to first figure out exactly\nwhich overload is being called.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>You may write a function that takes a <code>const\nstring&amp;</code> and overload it with another that\ntakes <code>const char*</code>.</p>\n<pre>class MyClass {\n public:\n  void Analyze(const string &amp;text);\n  void Analyze(const char *text, size_t textlen);\n};\n</pre>\n</div>\n<div class="pros">\n<p>Overloading can make code more intuitive by allowing an\nidentically-named function to take different arguments.\nIt may be necessary for templatized code, and it can be\nconvenient for Visitors.</p>\n</div>\n<div class="cons">\n<p>If a function is overloaded by the argument types alone,\na reader may have to understand C++\'s complex matching\nrules in order to tell what\'s going on. Also many people\nare confused by the semantics of inheritance if a derived\nclass overrides only some of the variants of a\nfunction.</p>\n</div>\n<div class="decision">\n<p>If you want to overload a function, consider qualifying\nthe name with some information about the arguments, e.g.,\n<code>AppendString()</code>, <code>AppendInt()</code>\nrather than just <code>Append()</code>. </p>\n</div>\n</div>\n\n'
p95
sbag2
(g3
g4
NtRp96
(dp97
g7
S'\n<h3 id="Default_Arguments">Default Arguments</h3>\n\n\n<div class="summary">\n<p>We do not allow default function parameters, except in\nlimited situations as explained below. Simulate them with\nfunction overloading instead, if appropriate.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="pros">\n<p>Often you have a function that uses default values, but\noccasionally you want to override the defaults. Default\nparameters allow an easy way to do this without having to\ndefine many functions for the rare exceptions. Compared\nto overloading the function, default arguments have a\ncleaner syntax, with less boilerplate and a clearer\ndistinction between \'required\' and \'optional\'\narguments.</p>\n</div>\n<div class="cons">\n<p>Function pointers are confusing in the presence of\ndefault arguments, since the function signature often\ndoesn\'t match the call signature. Adding a default\nargument to an existing function changes its type, which\ncan cause problems with code taking its address. Adding\nfunction overloads avoids these problems. In addition,\ndefault parameters may result in bulkier code since they\nare replicated at every call-site -- as opposed to\noverloaded functions, where "the default" appears only in\nthe function definition.</p>\n</div>\n<div class="decision">\n<p>While the cons above are not that onerous, they still\noutweigh the (small) benefits of default arguments over\nfunction overloading. So except as described below, we\nrequire all arguments to be explicitly specified.</p>\n<p>One specific exception is when the function is a\nstatic function (or in an unnamed namespace) in a .cc\nfile. In this case, the cons don\'t apply since the\nfunction\'s use is so localized.</p>\n<p>In addition, default function parameters are allowed in\nconstructors. Most of the cons listed above don\'t apply to\nconstructors because it\'s impossible to take their address.</p>\n<p>Another specific exception is when default arguments\nare used to simulate variable-length argument lists.</p>\n<pre>// Support up to 4 params by using a default empty AlphaNum.\nstring StrCat(const AlphaNum &amp;a,\n              const AlphaNum &amp;b = gEmptyAlphaNum,\n              const AlphaNum &amp;c = gEmptyAlphaNum,\n              const AlphaNum &amp;d = gEmptyAlphaNum);\n</pre>\n</div>\n</div>\n\n'
p98
sbag2
(g3
g4
NtRp99
(dp100
g7
S'\n<h3 id="Variable-Length_Arrays_and_alloca__">\n      Variable-Length Arrays and alloca()</h3>\n\n\n<div class="summary">\n<p>We do not allow variable-length arrays or\n<code>alloca()</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="pros">\n<p>Variable-length arrays have natural-looking syntax. Both\nvariable-length arrays and <code>alloca()</code> are very\nefficient.</p>\n</div>\n<div class="cons">\n<p>Variable-length arrays and alloca are not part of\nStandard C++. More importantly, they allocate a\ndata-dependent amount of stack space that can trigger\ndifficult-to-find memory overwriting bugs: "It ran fine\non my machine, but dies mysteriously in production".</p>\n</div>\n<div class="decision">\n<p>Use a safe allocator instead, such as\n<code>std::vector</code> or\n<code>std::unique_ptr&lt;T[]&gt;</code>.</p>\n</div>\n</div>\n\n'
p101
sbag2
(g3
g4
NtRp102
(dp103
g7
S'\n<h3 id="Friends">Friends</h3>\n\n\n<div class="summary">\n<p>We allow use of <code>friend</code> classes and functions,\nwithin reason.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Friends should usually be defined in the same file so\nthat the reader does not have to look in another file to\nfind uses of the private members of a class. A common use\nof <code>friend</code> is to have a\n<code>FooBuilder</code> class be a friend of\n<code>Foo</code> so that it can construct the inner state\nof <code>Foo</code> correctly, without exposing this\nstate to the world. In some cases it may be useful to\nmake a unittest class a friend of the class it tests.</p>\n<p>Friends extend, but do not break, the encapsulation\nboundary of a class. In some cases this is better than\nmaking a member public when you want to give only one\nother class access to it. However, most classes should\ninteract with other classes solely through their public\nmembers.</p>\n</div>\n\n'
p104
sbag2
(g3
g4
NtRp105
(dp106
g7
S'\n<h3 id="Exceptions">Exceptions</h3>\n\n\n<div class="summary">\n<p>We do not use C++ exceptions.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="pros">\n<ul>\n<li>Exceptions allow higher levels of an application to\n  decide how to handle "can\'t happen" failures in deeply\n  nested functions, without the obscuring and error-prone\n  bookkeeping of error codes.</li>\n<li>Exceptions are used by most other\n  modern languages. Using them in C++ would make it more\n  consistent with Python, Java, and the C++ that others\n  are familiar with.</li>\n<li>Some third-party C++ libraries use exceptions, and\n  turning them off internally makes it harder to\n  integrate with those libraries.</li>\n<li>Exceptions are the only way for a constructor to\n  fail. We can simulate this with a factory function or\n  an <code>Init()</code> method, but these require heap\n  allocation or a new "invalid" state, respectively.</li>\n<li>Exceptions are really handy in testing\n  frameworks.</li>\n</ul>\n</div>\n<div class="cons">\n<ul>\n<li>When you add a <code>throw</code> statement to an\n  existing function, you must examine all of its\n  transitive callers. Either they must make at least the\n  basic exception safety guarantee, or they must never\n  catch the exception and be happy with the program\n  terminating as a result. For instance, if\n  <code>f()</code> calls <code>g()</code> calls\n  <code>h()</code>, and <code>h</code> throws an\n  exception that <code>f</code> catches, <code>g</code>\n  has to be careful or it may not clean up properly.</li>\n<li>More generally, exceptions make the control flow of\n  programs difficult to evaluate by looking at code:\n  functions may return in places you don\'t expect. This\n  causes maintainability and debugging difficulties. You\n  can minimize this cost via some rules on how and where\n  exceptions can be used, but at the cost of more that a\n  developer needs to know and understand.</li>\n<li>Exception safety requires both RAII and different\n  coding practices. Lots of supporting machinery is\n  needed to make writing correct exception-safe code\n  easy. Further, to avoid requiring readers to understand\n  the entire call graph, exception-safe code must isolate\n  logic that writes to persistent state into a "commit"\n  phase. This will have both benefits and costs (perhaps\n  where you\'re forced to obfuscate code to isolate the\n  commit). Allowing exceptions would force us to always\n  pay those costs even when they\'re not worth it.</li>\n<li>Turning on exceptions adds data to each binary\n  produced, increasing compile time (probably slightly)\n  and possibly increasing address space pressure.\n  </li>\n<li>The availability of exceptions may encourage\n  developers to throw them when they are not appropriate\n  or recover from them when it\'s not safe to do so. For\n  example, invalid user input should not cause exceptions\n  to be thrown. We would need to make the style guide\n  even longer to document these restrictions!</li>\n</ul>\n</div>\n<div class="decision">\n<p>On their face, the benefits of using exceptions\noutweigh the costs, especially in new projects. However,\nfor existing code, the introduction of exceptions has\nimplications on all dependent code. If exceptions can be\npropagated beyond a new project, it also becomes\nproblematic to integrate the new project into existing\nexception-free code. Because most existing C++ code at\nGoogle is not prepared to deal with exceptions, it is\ncomparatively difficult to adopt new code that generates\nexceptions.</p>\n<p>Given that Google\'s existing code is not\nexception-tolerant, the costs of using exceptions are\nsomewhat greater than the costs in a new project. The\nconversion process would be slow and error-prone. We\ndon\'t believe that the available alternatives to\nexceptions, such as error codes and assertions, introduce\na significant burden. </p>\n<p>Our advice against using exceptions is not predicated\non philosophical or moral grounds, but practical ones.\n Because we\'d like to use our open-source\nprojects at Google and it\'s difficult to do so if those\nprojects use exceptions, we need to advise against\nexceptions in Google open-source projects as well.\nThings would probably be different if we had to do it all\nover again from scratch.</p>\n<p>This prohibition also applies to the exception-related\nfeatures added in C++11, such as <code>noexcept</code>,\n<code>std::exception_ptr</code>, and\n<code>std::nested_exception</code>.</p>\n<p>There is an <a href="#Windows_Code">exception</a> to\nthis rule (no pun intended) for Windows code.</p>\n</div>\n</div>\n\n'
p107
sbag2
(g3
g4
NtRp108
(dp109
g7
S'\n<h3 id="Run-Time_Type_Information__RTTI_">Run-Time Type\nInformation (RTTI)</h3>\n\n\n<div class="summary">\n<p>Avoid using Run Time Type Information (RTTI).</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> RTTI allows a\nprogrammer to query the C++ class of an object at run\ntime. This is done by use of <code>typeid</code> or\n<code>dynamic_cast</code>.</p>\n</div>\n<div class="cons">\n<p>Querying the type of an object at run-time frequently\nmeans a design problem. Needing to know the type of an\nobject at runtime is often an indication that the design\nof your class hierarchy is flawed.</p>\n<p>Undisciplined use of RTTI makes code hard to maintain.\nIt can lead to type-based decision trees or switch\nstatements scattered throughout the code, all of which\nmust be examined when making further changes.</p>\n</div>\n<div class="pros">\n<p>The standard alternatives to RTTI (described below)\nrequire modification or redesign of the class hierarchy\nin question. Sometimes such modifications are infeasible\nor undesirable, particularly in widely-used or mature\ncode.</p>\n<p>RTTI can be useful in some unit tests. For example, it\nis useful in tests of factory classes where the test has\nto verify that a newly created object has the expected\ndynamic type. It is also useful in managing the\nrelationship between objects and their mocks.</p>\n<p>RTTI is useful when considering multiple abstract\nobjects. Consider</p>\n<pre>bool Base::Equal(Base* other) = 0;\nbool Derived::Equal(Base* other) {\n  Derived* that = dynamic_cast&lt;Derived*&gt;(other);\n  if (that == NULL)\n    return false;\n  ...\n}\n</pre>\n</div>\n<div class="decision">\n<p>RTTI has legitimate uses but is prone to abuse, so you\nmust be careful when using it. You may use it freely in\nunittests, but avoid it when possible in other code. In\nparticular, think twice before using RTTI in new code. If\nyou find yourself needing to write code that behaves\ndifferently based on the class of an object, consider one\nof the following alternatives to querying the type:</p>\n<ul>\n<li>Virtual methods are the preferred way of executing\n  different code paths depending on a specific subclass\n  type. This puts the work within the object itself.</li>\n<li>If the work belongs outside the object and instead\n  in some processing code, consider a double-dispatch\n  solution, such as the Visitor design pattern. This\n  allows a facility outside the object itself to\n  determine the type of class using the built-in type\n  system.</li>\n</ul>\n<p>When the logic of a program guarantees that a given\ninstance of a base class is in fact an instance of a\nparticular derived class, then a\n<code>dynamic_cast</code> may be used freely on the\nobject.  Usually one\ncan use a <code>static_cast</code> as an alternative in\nsuch situations.</p>\n<p>Decision trees based on type are a strong indication\nthat your code is on the wrong track.</p>\n<pre class="badcode">if (typeid(*data) == typeid(D1)) {\n  ...\n} else if (typeid(*data) == typeid(D2)) {\n  ...\n} else if (typeid(*data) == typeid(D3)) {\n...\n</pre>\n<p>Code such as this usually breaks when additional\nsubclasses are added to the class hierarchy. Moreover,\nwhen properties of a subclass change, it is difficult to\nfind and modify all the affected code segments.</p>\n<p>Do not hand-implement an RTTI-like workaround. The\narguments against RTTI apply just as much to workarounds\nlike class hierarchies with type tags. Moreover,\nworkarounds disguise your true intent.</p>\n</div>\n</div>\n\n'
p110
sbag2
(g3
g4
NtRp111
(dp112
g7
S'\n<h3 id="Casting">Casting</h3>\n\n\n<div class="summary">\n<p>Use C++ casts like <code>static_cast&lt;&gt;()</code>. Do\nnot use other cast formats like <code>int y =\n(int)x;</code> or <code>int y = int(x);</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> C++ introduced a\ndifferent cast system from C that distinguishes the types\nof cast operations.</p>\n</div>\n<div class="pros">\n<p>The problem with C casts is the ambiguity of the\noperation; sometimes you are doing a <em>conversion</em>\n(e.g., <code>(int)3.5</code>) and sometimes you are doing\na <em>cast</em> (e.g., <code>(int)"hello"</code>); C++\ncasts avoid this. Additionally C++ casts are more visible\nwhen searching for them.</p>\n</div>\n<div class="cons">\n<p>The syntax is nasty.</p>\n</div>\n<div class="decision">\n<p>Do not use C-style casts. Instead, use these C++-style\ncasts. </p>\n<ul>\n<li>Use <code>static_cast</code> as the equivalent of a\n  C-style cast that does value conversion, or when you need to explicitly up-cast a\n  pointer from a class to its superclass.</li>\n<li>Use <code>const_cast</code> to remove the\n  <code>const</code> qualifier (see <a href="#Use_of_const">const</a>).</li>\n<li>Use <code>reinterpret_cast</code> to do unsafe\n  conversions of pointer types to and from integer and\n  other pointer types. Use this only if you know what you\n  are doing and you understand the aliasing issues.\n  </li>\n</ul>\n<p>See the <a href="#Run-Time_Type_Information__RTTI_">\nRTTI section</a> for guidance on the use of\n<code>dynamic_cast</code>.</p>\n</div>\n</div>\n\n'
p113
sbag2
(g3
g4
NtRp114
(dp115
g7
S'\n<h3 id="Streams">Streams</h3>\n\n\n<div class="summary">\n<p>Use streams only for logging.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Streams are a replacement for <code>printf()</code>\nand <code>scanf()</code>.</p>\n</div>\n<div class="pros">\n<p>With streams, you do not need to know the type of the\nobject you are printing. You do not have problems with\nformat strings not matching the argument list. (Though\nwith gcc, you do not have that problem with\n<code>printf</code> either.) Streams have automatic\nconstructors and destructors that open and close the\nrelevant files.</p>\n</div>\n<div class="cons">\n<p>Streams make it difficult to do functionality like\n<code>pread()</code>. Some formatting (particularly the\ncommon format string idiom <code>%.*s</code>) is\ndifficult if not impossible to do efficiently using\nstreams without using <code>printf</code>-like hacks.\nStreams do not support operator reordering (the\n<code>%1$s</code> directive), which is helpful for\ninternationalization.</p>\n</div>\n<div class="decision">\n<p>Do not use streams, except where\nrequired by a logging interface. Use\n<code>printf</code>-like routines instead.</p>\n<p>There are various pros and cons to using streams, but\nin this case, as in many other cases, consistency trumps\nthe debate. Do not use streams in your code.</p>\n</div>\n<div class="stylepoint_subsection">\n<h4>Extended Discussion</h4>\n<p>There has been debate on this issue, so this explains\nthe reasoning in greater depth. Recall the Only One Way\nguiding principle: we want to make sure that whenever we\ndo a certain type of I/O, the code looks the same in all\nthose places. Because of this, we do not want to allow\nusers to decide between using streams or using\n<code>printf</code> plus Read/Write/etc. Instead, we\nshould settle on one or the other. We made an exception\nfor logging because it is a pretty specialized\napplication, and for historical reasons.</p>\n<p>Proponents of streams have argued that streams are the\nobvious choice of the two, but the issue is not actually\nso clear. For every advantage of streams they point out,\nthere is an equivalent disadvantage. The biggest\nadvantage is that you do not need to know the type of the\nobject to be printing. This is a fair point. But, there\nis a downside: you can easily use the wrong type, and the\ncompiler will not warn you. It is easy to make this kind\nof mistake without knowing when using streams.</p>\n<pre>cout &lt;&lt; this;  // Prints the address\ncout &lt;&lt; *this;  // Prints the contents\n</pre>\n<p>The compiler does not generate an error because\n<code>&lt;&lt;</code> has been overloaded. We discourage\noverloading for just this reason.</p>\n<p>Some say <code>printf</code> formatting is ugly and\nhard to read, but streams are often no better. Consider\nthe following two fragments, both with the same typo.\nWhich is easier to discover?</p>\n<pre>cerr &lt;&lt; "Error connecting to \'" &lt;&lt; foo-&gt;bar()-&gt;hostname.first\n     &lt;&lt; ":" &lt;&lt; foo-&gt;bar()-&gt;hostname.second &lt;&lt; ": " &lt;&lt; strerror(errno);\n\nfprintf(stderr, "Error connecting to \'%s:%u: %s",\n        foo-&gt;bar()-&gt;hostname.first, foo-&gt;bar()-&gt;hostname.second,\n        strerror(errno));\n</pre>\n<p>And so on and so forth for any issue you might bring\nup. (You could argue, "Things would be better with the\nright wrappers," but if it is true for one scheme, is it\nnot also true for the other? Also, remember the goal is\nto make the language smaller, not add yet more machinery\nthat someone has to learn.)</p>\n<p>Either path would yield different advantages and\ndisadvantages, and there is not a clearly superior\nsolution. The simplicity doctrine mandates we settle on\none of them though, and the majority decision was on\n<code>printf</code> +\n<code>read</code>/<code>write</code>.</p>\n</div>\n</div>\n\n'
p116
sbag2
(g3
g4
NtRp117
(dp118
g7
S'\n<h3 id="Preincrement_and_Predecrement">Preincrement and Predecrement</h3>\n\n\n<div class="summary">\n<p>Use prefix form (<code>++i</code>) of the increment and\ndecrement operators with iterators and other template\nobjects.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> When a variable\nis incremented (<code>++i</code> or <code>i++</code>) or\ndecremented (<code>--i</code> or <code>i--</code>) and\nthe value of the expression is not used, one must decide\nwhether to preincrement (decrement) or postincrement\n(decrement).</p>\n</div>\n<div class="pros">\n<p>When the return value is ignored, the "pre" form\n(<code>++i</code>) is never less efficient than the\n"post" form (<code>i++</code>), and is often more\nefficient. This is because post-increment (or decrement)\nrequires a copy of <code>i</code> to be made, which is\nthe value of the expression. If <code>i</code> is an\niterator or other non-scalar type, copying <code>i</code>\ncould be expensive. Since the two types of increment\nbehave the same when the value is ignored, why not just\nalways pre-increment?</p>\n</div>\n<div class="cons">\n<p>The tradition developed, in C, of using post-increment\nwhen the expression value is not used, especially in\n<code>for</code> loops. Some find post-increment easier\nto read, since the "subject" (<code>i</code>) precedes\nthe "verb" (<code>++</code>), just like in English.</p>\n</div>\n<div class="decision">\n<p> For simple scalar\n(non-object) values there is no reason to prefer one form\nand we allow either. For iterators and other template\ntypes, use pre-increment.</p>\n</div>\n</div>\n\n'
p119
sbag2
(g3
g4
NtRp120
(dp121
g7
S'\n<h3 id="Use_of_const">Use of const</h3>\n\n\n<div class="summary">\n<p>Use <code>const</code> whenever it makes sense. With C++11,\n<code>constexpr</code> is a better choice for some uses of\nconst.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Declared variables and parameters can be preceded\nby the keyword <code>const</code> to indicate the variables\nare not changed (e.g., <code>const int foo</code>). Class\nfunctions can have the <code>const</code> qualifier to\nindicate the function does not change the state of the\nclass member variables (e.g., <code>class Foo { int\nBar(char c) const; };</code>).</p>\n</div>\n<div class="pros">\n<p>Easier for people to understand how variables are being\nused. Allows the compiler to do better type checking,\nand, conceivably, generate better code. Helps people\nconvince themselves of program correctness because they\nknow the functions they call are limited in how they can\nmodify your variables. Helps people know what functions\nare safe to use without locks in multi-threaded\nprograms.</p>\n</div>\n<div class="cons">\n<p><code>const</code> is viral: if you pass a\n<code>const</code> variable to a function, that function\nmust have <code>const</code> in its prototype (or the\nvariable will need a <code>const_cast</code>). This can\nbe a particular problem when calling library\nfunctions.</p>\n</div>\n<div class="decision">\n<p><code>const</code> variables, data members, methods\nand arguments add a level of compile-time type checking;\nit is better to detect errors as soon as possible.\nTherefore we strongly recommend that you use\n<code>const</code> whenever it makes sense to do so:</p>\n<ul>\n<li>If a function does not modify an argument passed by\n  reference or by pointer, that argument should be\n  <code>const</code>.</li>\n<li>Declare methods to be <code>const</code> whenever\n  possible. Accessors should almost always be\n  <code>const</code>. Other methods should be const if\n  they do not modify any data members, do not call any\n  non-<code>const</code> methods, and do not return a\n  non-<code>const</code> pointer or\n  non-<code>const</code> reference to a data member.</li>\n<li>Consider making data members <code>const</code>\n  whenever they do not need to be modified after\n  construction.</li>\n</ul>\n<p>The <code>mutable</code> keyword is allowed but is\nunsafe when used with threads, so thread safety should be\ncarefully considered first.</p>\n</div>\n<div class="stylepoint_subsection">\n<h4>Where to put the const</h4>\n<p>Some people favor the form <code>int const *foo</code>\nto <code>const int* foo</code>. They argue that this is\nmore readable because it\'s more consistent: it keeps the\nrule that <code>const</code> always follows the object\nit\'s describing. However, this consistency argument\ndoesn\'t apply in codebases with few deeply-nested pointer\nexpressions since most <code>const</code> expressions\nhave only one <code>const</code>, and it applies to the\nunderlying value. In such cases, there\'s no consistency\nto maintain. Putting the <code>const</code> first is\narguably more readable, since it follows English in\nputting the "adjective" (<code>const</code>) before the\n"noun" (<code>int</code>).</p>\n<p>That said, while we encourage putting\n<code>const</code> first, we do not require it. But be\nconsistent with the code around you!</p>\n</div>\n</div>\n\n'
p122
sbag2
(g3
g4
NtRp123
(dp124
g7
S'\n<h3 id="Use_of_constexpr">Use of constexpr</h3>\n\n\n<div class="summary">\n<p>In C++11, use <code>constexpr</code> to define true\nconstants or to ensure constant initialization.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Some variables can be declared <code>constexpr</code>\nto indicate the variables are true constants, i.e. fixed at\ncompilation/link time. Some functions and constructors\ncan be declared <code>constexpr</code> which enables them\nto be used in defining a <code>constexpr</code>\nvariable.</p>\n</div>\n<div class="pros">\n<p>Use of <code>constexpr</code> enables definition of\nconstants with floating-point expressions rather than\njust literals; definition of constants of user-defined\ntypes; and definition of constants with function\ncalls.</p>\n</div>\n<div class="cons">\n<p>Prematurely marking something as constexpr may cause\nmigration problems if later on it has to be downgraded.\nCurrent restrictions on what is allowed in constexpr\nfunctions and constructors may invite obscure workarounds\nin these definitions.</p>\n</div>\n<div class="decision">\n<p><code>constexpr</code> definitions enable a more\nrobust specification of the constant parts of an\ninterface. Use <code>constexpr</code> to specify true\nconstants and the functions that support their\ndefinitions. Avoid complexifying function definitions to\nenable their use with <code>constexpr</code>. Do not use\n<code>constexpr</code> to force inlining.</p>\n</div>\n</div>\n\n'
p125
sbag2
(g3
g4
NtRp126
(dp127
g7
S'\n<h3 id="Integer_Types">Integer Types</h3>\n\n\n<div class="summary">\n<p>Of the built-in C++ integer types, the only one used\n is\n<code>int</code>. If a program needs a variable of a\ndifferent size, use \na precise-width integer type from\n<code>&lt;stdint.h&gt;</code>, such as\n<code>int16_t</code>. If your variable represents a\nvalue that could ever be greater than or equal to 2^31\n(2GiB), use a 64-bit type such as\n<code>int64_t</code>.\nKeep in mind that even if your value won\'t ever be too large\nfor an <code>int</code>, it may be used in intermediate\ncalculations which may require a larger type. When in doubt,\nchoose a larger type.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> C++ does not specify the sizes of its integer types.\nTypically people assume that <code>short</code> is 16 bits,\n<code>int</code> is 32 bits, <code>long</code> is 32 bits\nand <code>long long</code> is 64 bits.</p>\n</div>\n<div class="pros">\n<p>Uniformity of declaration.</p>\n</div>\n<div class="cons">\n<p>The sizes of integral types in C++ can vary based on\ncompiler and architecture.</p>\n</div>\n<div class="decision">\n<p>\n<code>&lt;stdint.h&gt;</code> defines types\nlike <code>int16_t</code>, <code>uint32_t</code>,\n<code>int64_t</code>, etc. You should always use\nthose in preference to <code>short</code>, <code>unsigned\nlong long</code> and the like, when you need a guarantee\non the size of an integer. Of the C integer types, only\n<code>int</code> should be used. When appropriate, you\nare welcome to use standard types like\n<code>size_t</code> and <code>ptrdiff_t</code>.</p>\n<p>We use <code>int</code> very often, for integers we\nknow are not going to be too big, e.g., loop counters.\nUse plain old <code>int</code> for such things. You\nshould assume that an <code>int</code> is\n\nat least 32 bits, but don\'t\nassume that it has more than 32 bits. If you need a 64-bit\ninteger type, use\n<code>int64_t</code>\nor\n<code>uint64_t</code>.</p>\n<p>For integers we know can be "big",\n use\n<code>int64_t</code>.\n</p>\n<p>You should not use the unsigned integer types such as\n<code>uint32_t</code>, unless there is a valid\nreason such as representing a bit pattern rather than a\nnumber, or you need defined overflow modulo 2^N. In\nparticular, do not use unsigned types to say a number\nwill never be negative. Instead, use \nassertions for this.</p>\n<p>If your code is a container that returns a size, be\nsure to use a type that will accommodate any possible\nusage of your container. When in doubt, use a larger type\nrather than a smaller type.</p>\n<p>Use care when converting integer types. Integer\nconversions and promotions can cause non-intuitive\nbehavior. </p>\n</div>\n<div class="stylepoint_subsection">\n<h4>On Unsigned Integers</h4>\n<p>Some people, including some textbook authors,\nrecommend using unsigned types to represent numbers that\nare never negative. This is intended as a form of\nself-documentation. However, in C, the advantages of such\ndocumentation are outweighed by the real bugs it can\nintroduce. Consider:</p>\n<pre>for (unsigned int i = foo.Length()-1; i &gt;= 0; --i) ...\n</pre>\n<p>This code will never terminate! Sometimes gcc will\nnotice this bug and warn you, but often it will not.\nEqually bad bugs can occur when comparing signed and\nunsigned variables. Basically, C\'s type-promotion scheme\ncauses unsigned types to behave differently than one\nmight expect.</p>\n<p>So, document that a variable is non-negative using\nassertions. Don\'t use an unsigned\ntype.</p>\n</div>\n</div>\n\n'
p128
sbag2
(g3
g4
NtRp129
(dp130
g7
S'\n<h3 id="64-bit_Portability">64-bit Portability</h3>\n\n\n<div class="summary">\n<p>Code should be 64-bit and 32-bit friendly. Bear in mind\nproblems of printing, comparisons, and structure alignment.</p>\n</div>\n\n\n<div class="stylebody">\n<ul>\n<li>\n<p><code>printf()</code> specifiers for some types\n  are not cleanly portable between 32-bit and 64-bit\n  systems. C99 defines some portable format specifiers.\n  Unfortunately, MSVC 7.1 does not understand some of\n  these specifiers and the standard is missing a few,\n  so we have to define our own ugly versions in some\n  cases (in the style of the standard include file\n  <code>inttypes.h</code>):</p>\n<div>\n<pre>// printf macros for size_t, in the style of inttypes.h\n#ifdef _LP64\n#define __PRIS_PREFIX "z"\n#else\n#define __PRIS_PREFIX\n#endif\n\n// Use these macros after a % in a printf format string\n// to get correct 32/64 bit behavior, like this:\n// size_t size = records.size();\n// printf("%"PRIuS"\\n", size);\n\n#define PRIdS __PRIS_PREFIX "d"\n#define PRIxS __PRIS_PREFIX "x"\n#define PRIuS __PRIS_PREFIX "u"\n#define PRIXS __PRIS_PREFIX "X"\n#define PRIoS __PRIS_PREFIX "o"\n  </pre>\n</div>\n<table border="1" summary="portable printf specifiers">\n<tbody><tr align="center">\n<th>Type</th>\n<th>DO NOT use</th>\n<th>DO use</th>\n<th>Notes</th>\n</tr>\n<tr align="center">\n<td><code>void *</code> (or any pointer)</td>\n<td><code>%lx</code></td>\n<td><code>%p</code></td>\n<td></td>\n</tr>\n<tr align="center">\n<td><code>int64_t</code></td>\n<td><code>%qd</code>, <code>%lld</code></td>\n<td><code>%"PRId64"</code></td>\n<td></td>\n</tr>\n<tr align="center">\n<td><code>uint64_t</code></td>\n<td><code>%qu</code>, <code>%llu</code>,\n                  <code>%llx</code></td>\n<td><code>%"PRIu64"</code>,\n                  <code>%"PRIx64"</code></td>\n<td></td>\n</tr>\n<tr align="center">\n<td><code>size_t</code></td>\n<td><code>%u</code></td>\n<td><code>%"PRIuS"</code>, <code>%"PRIxS"</code></td>\n<td>\n    C99 specifies <code>%zu</code></td>\n</tr>\n<tr align="center">\n<td><code>ptrdiff_t</code></td>\n<td><code>%d</code></td>\n<td><code>%"PRIdS"</code></td>\n<td>\n    C99 specifies <code>%td</code></td>\n</tr>\n</tbody></table>\n<p>Note that the <code>PRI*</code> macros expand to\n  independent strings which are concatenated by the\n  compiler. Hence if you are using a non-constant\n  format string, you need to insert the value of the\n  macro into the format, rather than the name. It is\n  still possible, as usual, to include length\n  specifiers, etc., after the <code>%</code> when using\n  the <code>PRI*</code> macros. So, e.g.\n  <code>printf("x = %30"PRIuS"\\n", x)</code> would\n  expand on 32-bit Linux to <code>printf("x = %30" "u"\n  "\\n", x)</code>, which the compiler will treat as\n  <code>printf("x = %30u\\n", x)</code>.</p>\n</li>\n<li>Remember that <code>sizeof(void *)</code> !=\n  <code>sizeof(int)</code>. Use <code>intptr_t</code> if\n  you want a pointer-sized integer.</li>\n<li>You may need to be careful with structure\n  alignments, particularly for structures being stored on\n  disk. Any class/structure with a \n  <code>int64_t</code>/<code>uint64_t</code>\n  member will by default end up being 8-byte aligned on a\n  64-bit system. If you have such structures being shared\n  on disk between 32-bit and 64-bit code, you will need\n  to ensure that they are packed the same on both\n  architectures. \n  Most compilers offer a way to\n  alter structure alignment. For gcc, you can use\n  <code>__attribute__((packed))</code>. MSVC offers\n  <code>#pragma pack()</code> and\n  <code>__declspec(align())</code>.</li>\n<li>\n<p>Use the <code>LL</code> or <code>ULL</code>\n  suffixes as needed to create 64-bit constants. For\n  example:</p>\n<pre>int64_t my_value = 0x123456789LL;\nuint64_t my_mask = 3ULL &lt;&lt; 48;\n</pre>\n</li>\n<li>If you really need different code on 32-bit and\n  64-bit systems, use <code>#ifdef _LP64</code> to choose\n  between the code variants. (But please avoid this if\n  possible, and keep any such changes localized.)</li>\n</ul>\n</div>\n\n'
p131
sbag2
(g3
g4
NtRp132
(dp133
g7
S'\n<h3 id="Preprocessor_Macros">Preprocessor Macros</h3>\n\n\n<div class="summary">\n<p>Be very cautious with macros. Prefer inline functions,\nenums, and <code>const</code> variables to macros.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Macros mean that the code you see is not the same as\nthe code the compiler sees. This can introduce unexpected\nbehavior, especially since macros have global scope.</p>\n<p>Luckily, macros are not nearly as necessary in C++ as\nthey are in C. Instead of using a macro to inline\nperformance-critical code, use an inline function.\nInstead of using a macro to store a constant, use a\n<code>const</code> variable. Instead of using a macro to\n"abbreviate" a long variable name, use a reference.\nInstead of using a macro to conditionally compile code\n... well, don\'t do that at all (except, of course, for\nthe <code>#define</code> guards to prevent double\ninclusion of header files). It makes testing much more\ndifficult.</p>\n<p>Macros can do things these other techniques cannot,\nand you do see them in the codebase, especially in the\nlower-level libraries. And some of their special features\n(like stringifying, concatenation, and so forth) are not\navailable through the language proper. But before using a\nmacro, consider carefully whether there\'s a non-macro way\nto achieve the same result.</p>\n<p>The following usage pattern will avoid many problems\nwith macros; if you use macros, follow it whenever\npossible:</p>\n<ul>\n<li>Don\'t define macros in a <code>.h</code> file.</li>\n<li><code>#define</code> macros right before you use\n  them, and <code>#undef</code> them right after.</li>\n<li>Do not just <code>#undef</code> an existing macro\n  before replacing it with your own; instead, pick a name\n  that\'s likely to be unique.</li>\n<li>Try not to use macros that expand to unbalanced C++\n  constructs, or at least document that behavior\n  well.</li>\n<li>Prefer not using <code>##</code> to generate\n  function/class/variable names.</li>\n</ul>\n</div>\n\n'
p134
sbag2
(g3
g4
NtRp135
(dp136
g7
S'\n<h3 id="0_and_nullptr/NULL">0 and nullptr/NULL</h3>\n\n\n<div class="summary">\n<p>Use <code>0</code> for integers, <code>0.0</code> for\nreals, <code>nullptr</code> (or <code>NULL</code>) for\npointers, and <code>\'\\0\'</code> for chars.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Use <code>0</code> for integers and <code>0.0</code>\nfor reals. This is not controversial.</p>\n<p> For\npointers (address values), there is a choice between\n<code>0</code>, <code>NULL</code>, and\n<code>nullptr</code>. For projects that allow C++11\nfeatures, use <code>nullptr</code>. For C++03 projects,\nwe prefer <code>NULL</code> because it looks like a\npointer. In fact, some C++ compilers provide special\ndefinitions of <code>NULL</code> which enable them to\ngive useful warnings, particularly in situations where\n<code>sizeof(NULL)</code> is not equal to\n<code>sizeof(0)</code>.</p>\n<p>Use <code>\'\\0\'</code> for chars. This is the correct\ntype and also makes code more readable.</p>\n</div>\n\n'
p137
sbag2
(g3
g4
NtRp138
(dp139
g7
S'\n<h3 id="sizeof">sizeof</h3>\n\n\n<div class="summary">\n<p>Prefer <code>sizeof(<var>varname</var>)</code> to\n<code>sizeof(<var>type</var>)</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Use <code>sizeof(<var>varname</var>)</code> when you\ntake the size of a particular variable.\n<code>sizeof(<var>varname</var>)</code> will update\nappropriately if someone changes the variable type either\nnow or later. You may use\n<code>sizeof(<var>type</var>)</code> for code unrelated\nto any particular variable, such as code that manages an\nexternal or internal data format where a variable of an\nappropriate C++ type is not convenient.</p>\n<pre>Struct data;\nmemset(&amp;data, 0, sizeof(data));\n</pre>\n<pre class="badcode">memset(&amp;data, 0, sizeof(Struct));\n</pre>\n<pre>if (raw_size &lt; sizeof(int)) {\n  LOG(ERROR) &lt;&lt; "compressed record not big enough for count: " &lt;&lt; raw_size;\n  return false;\n}\n</pre>\n</div>\n\n'
p140
sbag2
(g3
g4
NtRp141
(dp142
g7
S'\n<h3 id="auto">auto</h3>\n\n\n<div class="summary">\n<p>Use <code>auto</code> to avoid type names that are just\nclutter. Continue to use manifest type declarations when it\nhelps readability, and never use <code>auto</code> for\nanything but local variables. </p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> In C++11, a variable whose type is given as <code>auto</code>\nwill be given a type that matches that of the expression used to\ninitialize it. You can use <code>auto</code> either to\ninitialize a variable by copying, or to bind a\nreference.</p>\n<pre>vector&lt;string&gt; v;\n...\nauto s1 = v[0];  // Makes a copy of v[0].\nconst auto&amp; s2 = v[0];  // s2 is a reference to v[0].\n</pre>\n</div>\n<div class="pros">\n<p>C++ type names can sometimes be long and cumbersome,\nespecially when they involve templates or namespaces. In\na statement like:</p>\n<pre>sparse_hash_map&lt;string, int&gt;::iterator iter = m.find(val);\n</pre>\n</div>\n<p>the return type is hard to read, and obscures the\nprimary purpose of the statement. Changing it to:</p>\n<pre>auto iter = m.find(val);\n</pre>\n<p>makes it more readable.</p>\n<p>Without <code>auto</code> we are sometimes forced to\nwrite a type name twice in the same expression, adding no\nvalue for the reader, as in:</p>\n<pre>diagnostics::ErrorStatus* status = new diagnostics::ErrorStatus("xyz");\n</pre>\n<p>Using <code>auto</code> makes it easier to use\nintermediate variables when appropriate, by reducing the\nburden of writing their types explicitly.</p>\n<div class="cons">\n<p>Sometimes code is clearer when types are manifest,\nespecially when a variable\'s initialization depends on\nthings that were declared far away. In an expression\nlike:</p>\n<pre>auto i = x.Lookup(key);\n</pre>\n<p>it may not be obvious what <code>i</code>\'s type is,\nif <code>x</code> was declared hundreds of lines earlier.</p>\n<p>Programmers have to understand the difference between\n<code>auto</code> and <code>const auto&amp;</code> or\nthey\'ll get copies when they didn\'t mean to.</p>\n<p>The interaction between <code>auto</code> and C++11\nbrace-initialization can be confusing. The\ndeclarations:</p>\n<pre>auto x(3);  // Note: parentheses.\nauto y{3};  // Note: curly braces.\n</pre>\n<p>mean different things \xe2\x80\x94\n<code>x</code> is an <code>int</code>, while\n<code>y</code> is a <code>std::initializer_list&lt;int&gt;</code>.\nThe same applies to other normally-invisible proxy types.\n</p>\n<p>If an <code>auto</code> variable is used as part of an\ninterface, e.g. as a constant in a header, then a\nprogrammer might change its type while only intending to\nchange its value, leading to a more radical API change\nthan intended.</p>\n</div>\n<div class="decision">\n<p><code>auto</code> is permitted, for local variables\nonly. Do not use <code>auto</code> for file-scope or\nnamespace-scope variables, or for class members. Never\ninitialize an <code>auto</code>-typed variable with\na braced initializer list.\n\n</p><p>The <code>auto</code> keyword is also used in an\nunrelated C++11 feature: it\'s part of the syntax for a\nnew kind of function declaration with a trailing return\ntype. Trailing return types are permitted only in lambda\nexpressions.</p>\n</div>\n</div>\n\n'
p143
sbag2
(g3
g4
NtRp144
(dp145
g7
S'\n<h3 id="Braced_Initializer_List">Braced Initializer List</h3>\n\n\n<div class="summary">\n<p>You may use braced initializer lists.</p>\n</div>\n\n\n<div class="stylebody">\n<p>In C++03, aggregate types (arrays and structs with no\nconstructor) could be initialized with braced initializer lists.\n</p>\n<pre>struct Point { int x; int y; };\nPoint p = {1, 2};\n</pre>\n<p>In C++11, this syntax was generalized, and any object type can now\nbe created with a braced initializer list, known as a\n<i>braced-init-list</i> in the C++ grammar. Here are a few examples\nof its use.</p>\n<pre>// Vector takes a braced-init-list of elements.\nvector&lt;string&gt; v{"foo", "bar"};\n\n// Basically the same, ignoring some small technicalities.\n// You may choose to use either form.\nvector&lt;string&gt; v = {"foo", "bar"};\n\n// Usable with \'new\' expressions.\nauto p = new vector&lt;string&gt;{"foo", "bar"};\n\n// A map can take a list of pairs. Nested braced-init-lists work.\nmap&lt;int, string&gt; m = {{1, "one"}, {2, "2"}};\n\n// A braced-init-list can be implicitly converted to a return type.\nvector&lt;int&gt; test_function() { return {1, 2, 3}; }\n\n// Iterate over a braced-init-list.\nfor (int i : {-1, -2, -3}) {}\n\n// Call a function using a braced-init-list.\nvoid TestFunction2(vector&lt;int&gt; v) {}\nTestFunction2({1, 2, 3});\n</pre>\n<p>A user-defined type can also define a constructor and/or assignment operator\nthat take <code>std::initializer_list&lt;T&gt;</code>, which is automatically\ncreated from <i>braced-init-list</i>:</p>\n<pre>class MyType {\n public:\n  // std::initializer_list references the underlying init list.\n  // It should be passed by value.\n  MyType(std::initializer_list&lt;int&gt; init_list) {\n    for (int i : init_list) append(i);\n  }\n  MyType&amp; operator=(std::initializer_list&lt;int&gt; init_list) {\n    clear();\n    for (int i : init_list) append(i);\n  }\n};\nMyType m{2, 3, 5, 7};\n</pre>\n<p>Finally, brace initialization can also call ordinary\nconstructors of data types, even if they do not have\n<code>std::initializer_list&lt;T&gt;</code> constructors.</p>\n<pre>double d{1.23};\n// Calls ordinary constructor as long as MyOtherType has no\n// std::initializer_list constructor.\nclass MyOtherType {\n public:\n  explicit MyOtherType(string);\n  MyOtherType(int, string);\n};\nMyOtherType m = {1, "b"};\n// If the constructor is explicit, you can\'t use the "= {}" form.\nMyOtherType m{"b"};\n</pre>\n<p>Never assign a <i>braced-init-list</i> to an auto\nlocal variable. In the single element case, what this\nmeans can be confusing.</p>\n<pre class="badcode">auto d = {1.23};        // d is a std::initializer_list&lt;double&gt;\n</pre>\n<pre>auto d = double{1.23};  // Good -- d is a double, not a std::initializer_list.\n</pre>\n<p>See <a href="#Braced_Initializer_List_Format">Braced_Initializer_List_Format</a> for formatting.</p>\n</div>\n\n'
p146
sbag2
(g3
g4
NtRp147
(dp148
g7
S'\n<h3 id="Lambda_expressions">Lambda expressions</h3>\n\n\n<div class="summary">\n<p>Use lambda expressions where appropriate.  Do not use\ndefault lambda captures; write all captures explicitly.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> Lambda expressions are a concise way of creating anonymous\nfunction objects. They\'re often useful when passing\nfunctions as arguments. For example:</p>\n<pre>std::sort(v.begin(), v.end(), [](int x, int y) {\n  return Weight(x) &lt; Weight(y);\n});\n</pre>\n<p>Lambdas were introduced in C++11 along with a set of utilities\nfor working with function objects, such as the polymorphic\nwrapper <code>std::function</code>.\n</p>\n</div>\n<div class="pros">\n<ul>\n<li>Lambdas are much more concise than other ways of\n   defining function objects to be passed to STL\n   algorithms, which can be a readability\n   improvement.</li>\n<li>Lambdas, <code>std::function</code>, and\n   <code>std::bind</code> can be used in combination as a\n   general purpose callback mechanism; they make it easy\n   to write functions that take bound functions as\n   arguments.</li>\n</ul>\n</div>\n<div class="cons">\n<ul>\n<li>Variable capture in lambdas can be tricky, and\n  might be a new source of dangling-pointer bugs.</li>\n<li>It\'s possible for use of lambdas to get out of\n  hand; very long nested anonymous functions can make\n  code harder to understand.</li>\n</ul>\n</div>\n<div class="decision">\n<ul>\n<li>Use lambda expressions where appropriate, with formatting as\ndescribed <a href="#Formatting_Lambda_Expressions">below</a>.</li>\n<li>Do not use default captures; write all lambda captures explicitly.\nFor example, instead of <code>[=](int x) { return x + n; }</code>\nyou should write <code>[n](int x) { return x + n; }</code> so that\nreaders can see immediately that <code>n</code> is being captured\n(by value).</li>\n<li>Keep unnamed lambdas short.  If a lambda body is more than\nmaybe five lines long, prefer to give the lambda a name, or to\nuse a named function instead of a lambda.</li>\n<li>Specify the return type of the lambda explicitly if that will\nmake it more obvious to readers, as with\n<a href="#auto"><code>auto</code></a>.</li>\n</ul>\n</div>\n</div>\n\n'
p149
sbag2
(g3
g4
NtRp150
(dp151
g7
S'\n<h3 id="Template_metaprogramming">Template metaprogramming</h3>\n\n\n<div class="summary">\n<p>Avoid complicated template programming.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p>Template metaprogramming refers to a family of techniques that\nexploit the fact that the C++ template instantiation mechanism is\nTuring complete and can be used to perform arbitrary compile-time\ncomputation in the type domain.</p>\n</div>\n<div class="pros">\n<p>Template metaprogramming allows extremely flexible interfaces that\nare type safe and high performance. Facilities like\n\n<a href="https://code.google.com/p/googletest/">Google Test</a>,\n<code>std::tuple</code>, <code>std::function</code>, and\nBoost.Spirit would be impossible without it.</p>\n</div>\n<div class="cons">\n<p>The techniques used in template metaprogramming are often obscure\nto anyone but language experts. Code that uses templates in\ncomplicated ways is often unreadable, and is hard to debug or\nmaintain.</p>\n<p>Template metaprogramming often leads to extremely poor compiler\ntime error messages: even if an interface is simple, the complicated\nimplementation details become visible when the user does something\nwrong.</p>\n<p>Template metaprogramming interferes with large scale refactoring by\nmaking the job of refactoring tools harder. First, the template code\nis expanded in multiple contexts, and it\'s hard to verify that the\ntransformation makes sense in all of them. Second, some refactoring\ntools work with an AST that only represents the structure of the code\nafter template expansion. It can be difficult to automatically work\nback to the original source construct that needs to be\nrewritten.</p>\n</div>\n<div class="decision">\n<p>Template metaprogramming sometimes allows cleaner and easier-to-use\ninterfaces than would be possible without it, but it\'s also often a\ntemptation to be overly clever. It\'s best used in a small number of\nlow level components where the extra maintenance burden is spread out\nover a large number of uses.</p>\n<p>Think twice before using template metaprogramming or other\ncomplicated template techniques; think about whether the average\nmember of your team will be able to understand your code well enough\nto maintain it after you switch to another project, or whether a\nnon-C++ programmer or someone casually browsing the code base will be\nable to understand the error messages or trace the flow of a function\nthey want to call.  If you\'re using recursive template instantiations\nor type lists or metafunctions or expression templates, or relying on\nSFINAE or on the <code>sizeof</code> trick for detecting function\noverload resolution, then there\'s a good chance you\'ve gone too\nfar.</p>\n<p>If you use template metaprogramming, you should expect to put\nconsiderable effort into minimizing and isolating the complexity. You\nshould hide metaprogramming as an implementation detail whenever\npossible, so that user-facing headers are readable, and you should\nmake sure that tricky code is especially well commented. You should\ncarefully document how the code is used, and you should say something\nabout what the "generated" code looks like. Pay extra attention to the\nerror messages that the compiler emits when users make mistakes.  The\nerror messages are part of your user interface, and your code should\nbe tweaked as necessary so that the error messages are understandable\nand actionable from a user point of view.</p>\n</div>\n</div>\n\n'
p152
sbag2
(g3
g4
NtRp153
(dp154
g7
S'\n<h3 id="Boost">Boost</h3>\n\n\n<div class="summary">\n<p>Use only approved libraries from the Boost library\ncollection.</p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> The\n<a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/">\nBoost library collection</a> is a popular collection of\npeer-reviewed, free, open-source C++ libraries.</p>\n</div>\n<div class="pros">\n<p>Boost code is generally very high-quality, is widely\nportable, and fills many important gaps in the C++\nstandard library, such as type traits and better binders.</p>\n</div>\n<div class="cons">\n<p>Some Boost libraries encourage coding practices which can\nhamper readability, such as metaprogramming and other\nadvanced template techniques, and an excessively\n"functional" style of programming. </p>\n</div>\n<div class="decision">\n<div>\n<p>In order to maintain a high level of readability for\nall contributors who might read and maintain code, we\nonly allow an approved subset of Boost features.\nCurrently, the following libraries are permitted:</p>\n<ul>\n<li>\n<a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/utility/call_traits.htm">\n  Call Traits</a> from <code>boost/call_traits.hpp</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/utility/compressed_pair.htm">\n  Compressed Pair</a> from  <code>boost/compressed_pair.hpp</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/graph/">\n  The Boost Graph Library (BGL)</a> from <code>boost/graph</code>,\n  except serialization (<code>adj_list_serialize.hpp</code>) and\n   parallel/distributed algorithms and data structures\n   (<code>boost/graph/parallel/*</code> and\n   <code>boost/graph/distributed/*</code>).</li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/property_map/">\n  Property Map</a> from <code>boost/property_map</code>, except\n  parallel/distributed property maps (<code>boost/property_map/parallel/*</code>).</li>\n<li>The part of <a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/iterator/">\n  Iterator</a> that deals with defining iterators:\n  <code>boost/iterator/iterator_adaptor.hpp</code>,\n  <code>boost/iterator/iterator_facade.hpp</code>, and\n  <code>boost/function_output_iterator.hpp</code></li>\n<li>The part of <a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/polygon/">\n  Polygon</a> that deals with Voronoi diagram\n  construction and doesn\'t depend on the rest of\n  Polygon:\n  <code>boost/polygon/voronoi_builder.hpp</code>,\n  <code>boost/polygon/voronoi_diagram.hpp</code>, and\n  <code>boost/polygon/voronoi_geometry_type.hpp</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/bimap/">\n  Bimap</a> from <code>boost/bimap</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/math/doc/html/dist.html">\n  Statistical Distributions and Functions</a> from\n  <code>boost/math/distributions</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/multi_index/">\n  Multi-index</a> from <code>boost/multi_index</code></li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/heap/">\n  Heap</a> from <code>boost/heap</code></li>\n<li>The flat containers from <a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/container/">\n  Container</a>:\n  <code>boost/container/flat_map</code>, and\n  <code>boost/container/flat_set</code></li>\n</ul>\n<p>We are actively considering adding other Boost\nfeatures to the list, so this list may be expanded in\nthe future.</p>\n</div>\n<p>The following libraries are permitted, but their use\nis discouraged because they\'ve been superseded by\nstandard libraries in C++11:</p>\n<ul>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/array/">\n  Array</a> from <code>boost/array.hpp</code>: use\n  <a href="http://www.google.com/url?sa=D&amp;q=http://en.cppreference.com/w/cpp/container/array">\n<code>std::array</code></a> instead.</li>\n<li><a href="http://www.google.com/url?sa=D&amp;q=http://www.boost.org/libs/ptr_container/">\n   Pointer Container</a> from <code>boost/ptr_container</code>: use containers of\n   <a href="http://www.google.com/url?sa=D&amp;q=http://en.cppreference.com/w/cpp/memory/unique_ptr">\n<code>std::unique_ptr</code></a> instead.</li>\n</ul>\n</div>\n</div>\n\n'
p155
sbag2
(g3
g4
NtRp156
(dp157
g7
S'\n<h3 id="C++11">C++11</h3>\n\n\n<div class="summary">\n<p>Use libraries and language extensions from C++11 (formerly\nknown as C++0x) when appropriate. \nConsider portability to other environments\nbefore using C++11 features in your\nproject. </p>\n</div>\n\n\n<div class="stylebody">\n<div class="definition">\n<p> C++11 contains <a href="http://www.google.com/url?sa=D&amp;q=http://en.wikipedia.org/wiki/C%2B%2B11">\nsignificant changes</a> both to the language and\nlibraries. </p>\n</div>\n<div class="pros">\n<p>C++11 was the official standard until august 2014, and\nis supported by most C++ compilers. It standardizes\nsome common C++ extensions that we use already, allows\nshorthands for some operations, and has some performance\nand safety improvements.</p>\n</div>\n<div class="cons">\n<p>The C++11 standard is substantially more complex than\nits predecessor (1,300 pages versus 800 pages), and is\nunfamiliar to many developers. The long-term effects of\nsome features on code readability and maintenance are\nunknown. We cannot predict when its various features will\nbe implemented uniformly by tools that may be of\ninterest, particularly in the case of projects that are\nforced to use older versions of tools.</p>\n<p>As with <a href="#Boost">Boost</a>, some C++11\nextensions encourage coding practices that hamper\nreadability\xe2\x80\x94for example by removing\nchecked redundancy (such as type names) that may be\nhelpful to readers, or by encouraging template\nmetaprogramming. Other extensions duplicate functionality\navailable through existing mechanisms, which may lead to confusion\nand conversion costs.</p>\n</div>\n<div class="decision">\n<p>C++11 features may be used unless specified otherwise.\nIn addition to what\'s described in the rest of the style\nguide, the following C++11 features may not be used:</p>\n<ul>\n<li>Functions (other than lambda functions)\n  with trailing return types, e.g. writing\n  <code>auto foo() -&gt; int;</code> instead of <code>int\n  foo();</code>, because of a desire to preserve\n  stylistic consistency with the many existing function\n  declarations.</li>\n<li>Compile-time rational numbers\n  (<code>&lt;ratio&gt;</code>), because of concerns that\n  it\'s tied to a more template-heavy interface\n  style.</li>\n<li>The <code>&lt;cfenv&gt;</code> and\n  <code>&lt;fenv.h&gt;</code> headers, because many\n  compilers do not support those features reliably.</li>\n<li>Default lambda captures.</li>\n</ul>\n</div>\n</div>\n\n'
p158
sbag2
(g3
g4
NtRp159
(dp160
g7
S'\n<h2 id="Naming">Naming</h2>\n\n\n<p>The most important consistency rules are those that govern\nnaming. The style of a name immediately informs us what sort of\nthing the named entity is: a type, a variable, a function, a\nconstant, a macro, etc., without requiring us to search for the\ndeclaration of that entity. The pattern-matching engine in our\nbrains relies a great deal on these naming rules.\n</p>\n\n\n<p>Naming rules are pretty arbitrary, but\n we feel that\nconsistency is more important than individual preferences in this\narea, so regardless of whether you find them sensible or not,\nthe rules are the rules.</p>\n\n\n<h3 id="General_Naming_Rules">General Naming Rules</h3>\n\n\n<div class="summary">\n<p>Function names, variable names, and filenames should be\ndescriptive; eschew abbreviation.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Give as descriptive a name as possible, within reason.\nDo not worry about saving horizontal space as it is far\nmore important to make your code immediately\nunderstandable by a new reader. Do not use abbreviations\nthat are ambiguous or unfamiliar to readers outside your\nproject, and do not abbreviate by deleting letters within\na word.</p>\n<pre>int price_count_reader;    // No abbreviation.\nint num_errors;            // "num" is a widespread convention.\nint num_dns_connections;   // Most people know what "DNS" stands for.\n</pre>\n<pre class="badcode">int n;                     // Meaningless.\nint nerr;                  // Ambiguous abbreviation.\nint n_comp_conns;          // Ambiguous abbreviation.\nint wgc_connections;       // Only your group knows what this stands for.\nint pc_reader;             // Lots of things can be abbreviated "pc".\nint cstmr_id;              // Deletes internal letters.\n</pre>\n</div>\n\n'
p161
sbag2
(g3
g4
NtRp162
(dp163
g7
S'\n<h3 id="File_Names">File Names</h3>\n\n\n<div class="summary">\n<p>Filenames should be all lowercase and can include\nunderscores (<code>_</code>) or dashes (<code>-</code>).\nFollow the convention that your\n \nproject uses. If there is no consistent\nlocal pattern to follow, prefer "_".</p>\n</div>\n\n\n<div class="stylebody">\n<p>Examples of acceptable file names:</p>\n<ul>\n<li><code>my_useful_class.cc</code></li>\n<li><code>my-useful-class.cc</code></li>\n<li><code>myusefulclass.cc</code></li>\n<li><code>myusefulclass_test.cc // _unittest and _regtest are deprecated.</code></li>\n</ul>\n<p>C++ files should end in <code>.cc</code> and header files should end in\n<code>.h</code>. Files that rely on being textually included at specific points\nshould end in <code>.inc</code> (see also the section on\n<a href="#Self_contained_Headers">self-contained headers</a>).</p>\n<p>Do not use filenames that already exist in\n<code>/usr/include</code>, such as <code>db.h</code>.</p>\n<p>In general, make your filenames very specific. For\nexample, use <code>http_server_logs.h</code> rather than\n<code>logs.h</code>. A very common case is to have a pair\nof files called, e.g., <code>foo_bar.h</code> and\n<code>foo_bar.cc</code>, defining a class called\n<code>FooBar</code>.</p>\n<p>Inline functions must be in a <code>.h</code> file. If\nyour inline functions are very short, they should go\ndirectly into your <code>.h</code> file. </p>\n</div>\n\n'
p164
sbag2
(g3
g4
NtRp165
(dp166
g7
S'\n<h3 id="Type_Names">Type Names</h3>\n\n\n<div class="summary">\n<p>Type names start with a capital letter and have a capital\nletter for each new word, with no underscores:\n<code>MyExcitingClass</code>, <code>MyExcitingEnum</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>The names of all types \xe2\x80\x94 classes, structs, typedefs,\nand enums \xe2\x80\x94 have the same naming convention. Type names\nshould start with a capital letter and have a capital letter\nfor each new word. No underscores. For example:</p>\n<pre>// classes and structs\nclass UrlTable { ...\nclass UrlTableTester { ...\nstruct UrlTableProperties { ...\n\n// typedefs\ntypedef hash_map&lt;UrlTableProperties *, string&gt; PropertiesMap;\n\n// enums\nenum UrlTableErrors { ...\n</pre>\n</div>\n\n'
p167
sbag2
(g3
g4
NtRp168
(dp169
g7
S'\n<h3 id="Variable_Names">Variable Names</h3>\n\n\n<div class="summary">\n<p>The names of variables and data members are all lowercase, with\nunderscores between words. Data members of classes (but not structs)\nadditionally have trailing underscores. For instance:\n<code>a_local_variable</code>, <code>a_struct_data_member</code>,\n<code>a_class_data_member_</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Common Variable names</h4>\n<p>For example:</p>\n<pre>string table_name;  // OK - uses underscore.\nstring tablename;   // OK - all lowercase.\n</pre>\n<pre class="badcode">string tableName;   // Bad - mixed case.\n</pre>\n<h4 class="stylepoint_subsection">Class Data Members</h4>\n<p>Data members of classes, both static and non-static, are\nnamed like ordinary nonmember variables, but with a\ntrailing underscore.</p>\n<pre>class TableInfo {\n  ...\n private:\n  string table_name_;  // OK - underscore at end.\n  string tablename_;   // OK.\n  static Pool&lt;TableInfo&gt;* pool_;  // OK.\n};\n</pre>\n<h4 class="stylepoint_subsection">Struct Data Members</h4>\n<p>Data members of structs, both static and non-static,\nare named like ordinary nonmember variables. They do not have\nthe trailing underscores that data members in classes have.</p>\n<pre>struct UrlTableProperties {\n  string name;\n  int num_entries;\n  static Pool&lt;UrlTableProperties&gt;* pool;\n};\n</pre>\n<p>See <a href="#Structs_vs._Classes">Structs vs.\nClasses</a> for a discussion of when to use a struct\nversus a class.</p>\n<h4 class="stylepoint_subsection">Global Variables</h4>\n<p>There are no special requirements for global\nvariables, which should be rare in any case, but if you\nuse one, consider prefixing it with <code>g_</code> or\nsome other marker to easily distinguish it from local\nvariables.</p>\n</div>\n\n'
p170
sbag2
(g3
g4
NtRp171
(dp172
g7
S'\n<h3 id="Constant_Names">Constant Names</h3>\n\n\n<div class="summary">\n<p>Use a <code>k</code> followed by mixed case, e.g.,\n<code>kDaysInAWeek</code>, for constants defined globally or within a class.</p>\n</div>\n\n\n<div class="stylebody">\n<p>As a convenience to the reader, compile-time constants of global or class scope\nfollow a different naming convention from other variables.\nUse a <code>k</code> followed by words with uppercase first letters:</p>\n<pre>const int kDaysInAWeek = 7;\n</pre>\n<p>This convention may optionally be used for compile-time constants of local scope;\notherwise the usual variable naming rules apply.\n\n</p></div>\n\n'
p173
sbag2
(g3
g4
NtRp174
(dp175
g7
S'\n<h3 id="Function_Names">Function Names</h3>\n\n\n<div class="summary">\n<p>Regular functions have mixed case; accessors and mutators\nmatch the name of the variable:\n<code>MyExcitingFunction()</code>,\n<code>MyExcitingMethod()</code>,\n<code>my_exciting_member_variable()</code>,\n<code>set_my_exciting_member_variable()</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Regular Functions</h4>\n<p>Functions should start with a capital letter and have\na capital letter for each new word. No underscores.</p>\n<p>If your function crashes upon an error, you should\nappend OrDie to the function name. This only applies to\nfunctions which could be used by production code and to\nerrors that are reasonably likely to occur during normal\noperation.</p>\n<pre>AddTableEntry()\nDeleteUrl()\nOpenFileOrDie()\n</pre>\n<h4 class="stylepoint_subsection">Accessors and Mutators</h4>\n<p>Accessors and mutators (get and set functions) should\nmatch the name of the variable they are getting and\nsetting. This shows an excerpt of a class whose instance\nvariable is <code>num_entries_</code>.</p>\n<pre>class MyClass {\n public:\n  ...\n  int num_entries() const { return num_entries_; }\n  void set_num_entries(int num_entries) { num_entries_ = num_entries; }\n\n private:\n  int num_entries_;\n};\n</pre>\n<p>You may also use lowercase letters for other very\nshort inlined functions. For example if a function were\nso cheap you would not cache the value if you were\ncalling it in a loop, then lowercase naming would be\nacceptable.</p>\n</div>\n\n'
p176
sbag2
(g3
g4
NtRp177
(dp178
g7
S'\n<h3 id="Namespace_Names">Namespace Names</h3>\n\n\n<div class="summary">\n<p>Namespace names are all lower-case,\nand based on project names and possibly their directory\nstructure: <code>google_awesome_project</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>See <a href="#Namespaces">Namespaces</a> for a\ndiscussion of namespaces and how to name them.</p>\n</div>\n\n'
p179
sbag2
(g3
g4
NtRp180
(dp181
g7
S'\n<h3 id="Enumerator_Names">Enumerator Names</h3>\n\n\n<div class="summary">\n<p>Enumerators should be named <i>either</i> like\n<a href="#Constant_Names">constants</a> or like\n<a href="#Macro_Names">macros</a>: either <code>kEnumName</code> or\n<code>ENUM_NAME</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Preferably, the individual enumerators should be named\nlike <a href="#Constant_Names">constants</a>. However, it\nis also acceptable to name them like\n<a href="Macro_Names">macros</a>.  The enumeration name,\n<code>UrlTableErrors</code> (and\n<code>AlternateUrlTableErrors</code>), is a type, and\ntherefore mixed case.</p>\n<pre>enum UrlTableErrors {\n  kOK = 0,\n  kErrorOutOfMemory,\n  kErrorMalformedInput,\n};\nenum AlternateUrlTableErrors {\n  OK = 0,\n  OUT_OF_MEMORY = 1,\n  MALFORMED_INPUT = 2,\n};\n</pre>\n<p>Until January 2009, the style was to name enum values\nlike <a href="#Macro_Names">macros</a>. This caused\nproblems with name collisions between enum values and\nmacros. Hence, the change to prefer constant-style naming\nwas put in place. New code should prefer constant-style\nnaming if possible. However, there is no reason to change\nold code to use constant-style names, unless the old\nnames are actually causing a compile-time problem.</p>\n</div>\n\n'
p182
sbag2
(g3
g4
NtRp183
(dp184
g7
S'\n<h3 id="Macro_Names">Macro Names</h3>\n\n\n<div class="summary">\n<p>You\'re not really going to <a href="#Preprocessor_Macros">\ndefine a macro</a>, are you? If you do, they\'re like this:\n<code>MY_MACRO_THAT_SCARES_SMALL_CHILDREN</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Please see the <a href="#Preprocessor_Macros">description\nof macros</a>; in general macros should <em>not</em> be used.\nHowever, if they are absolutely needed, then they should be\nnamed with all capitals and underscores.</p>\n<pre>#define ROUND(x) ...\n#define PI_ROUNDED 3.0\n</pre>\n</div>\n\n'
p185
sbag2
(g3
g4
NtRp186
(dp187
g7
S'\n<h3 id="Exceptions_to_Naming_Rules">Exceptions to Naming Rules</h3>\n\n\n<div class="summary">\n<p>If you are naming something that is analogous to an\nexisting C or C++ entity then you can follow the existing\nnaming convention scheme.</p>\n</div>\n\n\n<div class="stylebody">\n<dl>\n<dt><code>bigopen()</code></dt>\n<dd>function name, follows form of <code>open()</code></dd>\n<dt><code>uint</code></dt>\n<dd><code>typedef</code></dd>\n<dt><code>bigpos</code></dt>\n<dd><code>struct</code> or <code>class</code>, follows\n  form of <code>pos</code></dd>\n<dt><code>sparse_hash_map</code></dt>\n<dd>STL-like entity; follows STL naming conventions</dd>\n<dt><code>LONGLONG_MAX</code></dt>\n<dd>a constant, as in <code>INT_MAX</code></dd>\n</dl>\n</div>\n\n'
p188
sbag2
(g3
g4
NtRp189
(dp190
g7
S'\n<h2 id="Comments">Comments</h2>\n\n\n<p>Though a pain to write, comments are absolutely vital to\nkeeping our code readable. The following rules describe what\nyou should comment and where. But remember: while comments are\nvery important, the best code is self-documenting. Giving\nsensible names to types and variables is much better than using\nobscure names that you must then explain through comments.</p>\n\n\n<p>When writing your comments, write for your audience: the\nnext \ncontributor who will need to\nunderstand your code. Be generous \xe2\x80\x94 the next\none may be you!</p>\n\n\n<h3 id="Comment_Style">Comment Style</h3>\n\n\n<div class="summary">\n<p>Use either the <code>//</code> or <code>/* */</code>\nsyntax, as long as you are consistent.</p>\n</div>\n\n\n<div class="stylebody">\n<p>You can use either the <code>//</code> or the <code>/*\n*/</code> syntax; however, <code>//</code> is\n<em>much</em> more common. Be consistent with how you\ncomment and what style you use where.</p>\n</div>\n\n'
p191
sbag2
(g3
g4
NtRp192
(dp193
g7
S'\n<h3 id="File_Comments">File Comments</h3>\n\n\n<div class="summary">\n<p> Start each file with license\nboilerplate, followed by a description of its\ncontents.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Legal Notice and Author\nLine</h4>\n<p>Every file should contain license\nboilerplate. Choose the appropriate boilerplate for the\nlicense used by the project (for example, Apache 2.0,\nBSD, LGPL, GPL).</p>\n<p>If you make significant changes to a file with an\nauthor line, consider deleting the author line.</p>\n<h4 class="stylepoint_subsection">File Contents</h4>\n<p>Every file should have a comment at the top describing\nits contents.</p>\n<p>Generally a <code>.h</code> file will describe the\nclasses that are declared in the file with an overview of\nwhat they are for and how they are used. A\n<code>.cc</code> file should contain more information\nabout implementation details or discussions of tricky\nalgorithms. If you feel the implementation details or a\ndiscussion of the algorithms would be useful for someone\nreading the <code>.h</code>, feel free to put it there\ninstead, but mention in the <code>.cc</code> that the\ndocumentation is in the <code>.h</code> file.</p>\n<p>Do not duplicate comments in both the <code>.h</code>\nand the <code>.cc</code>. Duplicated comments\ndiverge.</p>\n</div>\n\n'
p194
sbag2
(g3
g4
NtRp195
(dp196
g7
S'\n<h3 id="Class_Comments">Class Comments</h3>\n\n\n<div class="summary">\n<p>Every class definition should have an accompanying comment\nthat describes what it is for and how it should be used.</p>\n</div>\n\n\n<div class="stylebody">\n<pre>// Iterates over the contents of a GargantuanTable.  Sample usage:\n//    GargantuanTableIterator* iter = table-&gt;NewIterator();\n//    for (iter-&gt;Seek("foo"); !iter-&gt;done(); iter-&gt;Next()) {\n//      process(iter-&gt;key(), iter-&gt;value());\n//    }\n//    delete iter;\nclass GargantuanTableIterator {\n  ...\n};\n</pre>\n<p>If you have already described a class in detail in the\ncomments at the top of your file feel free to simply\nstate "See comment at top of file for a complete\ndescription", but be sure to have some sort of\ncomment.</p>\n<p>Document the synchronization assumptions the class\nmakes, if any. If an instance of the class can be\naccessed by multiple threads, take extra care to document\nthe rules and invariants surrounding multithreaded\nuse.</p>\n</div>\n\n'
p197
sbag2
(g3
g4
NtRp198
(dp199
g7
S'\n<h3 id="Function_Comments">Function Comments</h3>\n\n\n<div class="summary">\n<p>Declaration comments describe use of the function; comments\nat the definition of a function describe operation.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Function Declarations</h4>\n<p>Every function declaration should have comments\nimmediately preceding it that describe what the function\ndoes and how to use it. These comments should be\ndescriptive ("Opens the file") rather than imperative\n("Open the file"); the comment describes the function, it\ndoes not tell the function what to do. In general, these\ncomments do not describe how the function performs its\ntask. Instead, that should be left to comments in the\nfunction definition.</p>\n<p>Types of things to mention in comments at the function\ndeclaration:</p>\n<ul>\n<li>What the inputs and outputs are.</li>\n<li>For class member functions: whether the object\n  remembers reference arguments beyond the duration of\n  the method call, and whether it will free them or\n  not.</li>\n<li>If the function allocates memory that the caller\n  must free.</li>\n<li>Whether any of the arguments can be a null\n  pointer.</li>\n<li>If there are any performance implications of how a\n  function is used.</li>\n<li>If the function is re-entrant. What are its\n  synchronization assumptions?</li>\n</ul>\n<p>Here is an example:</p>\n<pre>// Returns an iterator for this table.  It is the client\'s\n// responsibility to delete the iterator when it is done with it,\n// and it must not use the iterator once the GargantuanTable object\n// on which the iterator was created has been deleted.\n//\n// The iterator is initially positioned at the beginning of the table.\n//\n// This method is equivalent to:\n//    Iterator* iter = table-&gt;NewIterator();\n//    iter-&gt;Seek("");\n//    return iter;\n// If you are going to immediately seek to another place in the\n// returned iterator, it will be faster to use NewIterator()\n// and avoid the extra seek.\nIterator* GetIterator() const;\n</pre>\n<p>However, do not be unnecessarily verbose or state the\ncompletely obvious. Notice below that it is not necessary\n to say "returns false otherwise" because this is\nimplied.</p>\n<pre>// Returns true if the table cannot hold any more entries.\nbool IsTableFull();\n</pre>\n<p>When commenting constructors and destructors, remember\nthat the person reading your code knows what constructors\nand destructors are for, so comments that just say\nsomething like "destroys this object" are not useful.\nDocument what constructors do with their arguments (for\nexample, if they take ownership of pointers), and what\ncleanup the destructor does. If this is trivial, just\nskip the comment. It is quite common for destructors not\nto have a header comment.</p>\n<h4 class="stylepoint_subsection">Function Definitions</h4>\n<p>If there is anything tricky about how a function does\nits job, the function definition should have an\nexplanatory comment. For example, in the definition\ncomment you might describe any coding tricks you use,\ngive an overview of the steps you go through, or explain\nwhy you chose to implement the function in the way you\ndid rather than using a viable alternative. For instance,\nyou might mention why it must acquire a lock for the\nfirst half of the function but why it is not needed for\nthe second half.</p>\n<p>Note you should <em>not</em> just repeat the comments\ngiven with the function declaration, in the\n<code>.h</code> file or wherever. It\'s okay to\nrecapitulate briefly what the function does, but the\nfocus of the comments should be on how it does it.</p>\n</div>\n\n'
p200
sbag2
(g3
g4
NtRp201
(dp202
g7
S'\n<h3 id="Variable_Comments">Variable Comments</h3>\n\n\n<div class="summary">\n<p>In general the actual name of the variable should be\ndescriptive enough to give a good idea of what the variable\nis used for. In certain cases, more comments are required.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Class Data Members</h4>\n<p>Each class data member (also called an instance\nvariable or member variable) should have a comment\ndescribing what it is used for. If the variable can take\nsentinel values with special meanings, such as a null\npointer or -1, document this. For example:</p>\n<pre>private:\n // Keeps track of the total number of entries in the table.\n // Used to ensure we do not go over the limit. -1 means\n // that we don\'t yet know how many entries the table has.\n int num_total_entries_;\n</pre>\n<h4 class="stylepoint_subsection">Global Variables</h4>\n<p>As with data members, all global variables should have\na comment describing what they are and what they are used\nfor. For example:</p>\n<pre>// The total number of tests cases that we run through in this regression test.\nconst int kNumTestCases = 6;\n</pre>\n</div>\n\n'
p203
sbag2
(g3
g4
NtRp204
(dp205
g7
S'\n<h3 id="Implementation_Comments">Implementation Comments</h3>\n\n\n<div class="summary">\n<p>In your implementation you should have comments in tricky,\nnon-obvious, interesting, or important parts of your code.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">Explanatory Comments</h4>\n<p>Tricky or complicated code blocks should have comments\nbefore them. Example:</p>\n<pre>// Divide result by two, taking into account that x\n// contains the carry from the add.\nfor (int i = 0; i &lt; result-&gt;size(); i++) {\n  x = (x &lt;&lt; 8) + (*result)[i];\n  (*result)[i] = x &gt;&gt; 1;\n  x &amp;= 1;\n}\n</pre>\n<h4 class="stylepoint_subsection">Line Comments</h4>\n<p>Also, lines that are non-obvious should get a comment\nat the end of the line. These end-of-line comments should\nbe separated from the code by 2 spaces. Example:</p>\n<pre>// If we have enough memory, mmap the data portion too.\nmmap_budget = max&lt;int64&gt;(0, mmap_budget - index_-&gt;length());\nif (mmap_budget &gt;= data_size_ &amp;&amp; !MmapData(mmap_chunk_bytes, mlock))\n  return;  // Error already logged.\n</pre>\n<p>Note that there are both comments that describe what\nthe code is doing, and comments that mention that an\nerror has already been logged when the function\nreturns.</p>\n<p>If you have several comments on subsequent lines, it\ncan often be more readable to line them up:</p>\n<pre>DoSomething();                  // Comment here so the comments line up.\nDoSomethingElseThatIsLonger();  // Two spaces between the code and the comment.\n{ // One space before comment when opening a new scope is allowed,\n  // thus the comment lines up with the following comments and code.\n  DoSomethingElse();  // Two spaces before line comments normally.\n}\nvector&lt;string&gt; list{// Comments in braced lists describe the next element ..\n                    "First item",\n                    // .. and should be aligned appropriately.\n                    "Second item"};\nDoSomething(); /* For trailing block comments, one space is fine. */\n</pre>\n<h4 class="stylepoint_subsection">nullptr/NULL, true/false, 1, 2, 3...</h4>\n<p>When you pass in a null pointer, boolean, or literal\ninteger values to functions, you should consider adding a\ncomment about what they are, or make your code\nself-documenting by using constants. For example,\ncompare:</p>\n<pre class="badcode">bool success = CalculateSomething(interesting_value,\n                                  10,\n                                  false,\n                                  NULL);  // What are these arguments??\n</pre>\n<p>versus:</p>\n<pre>bool success = CalculateSomething(interesting_value,\n                                  10,     // Default base value.\n                                  false,  // Not the first time we\'re calling this.\n                                  NULL);  // No callback.\n</pre>\n<p>Or alternatively, constants or self-describing variables:</p>\n<pre>const int kDefaultBaseValue = 10;\nconst bool kFirstTimeCalling = false;\nCallback *null_callback = NULL;\nbool success = CalculateSomething(interesting_value,\n                                  kDefaultBaseValue,\n                                  kFirstTimeCalling,\n                                  null_callback);\n</pre>\n<h4 class="stylepoint_subsection">Don\'ts</h4>\n<p>Note that you should <em>never</em> describe the code\nitself. Assume that the person reading the code knows C++\nbetter than you do, even though he or she does not know\nwhat you are trying to do:</p>\n<pre class="badcode">// Now go through the b array and make sure that if i occurs,\n// the next element is i+1.\n...        // Geez.  What a useless comment.\n</pre>\n</div>\n\n'
p206
sbag2
(g3
g4
NtRp207
(dp208
g7
S'\n<h3 id="Punctuation,_Spelling_and_Grammar">Punctuation, Spelling and Grammar</h3>\n\n\n<div class="summary">\n<p>Pay attention to punctuation, spelling, and grammar; it is\neasier to read well-written comments than badly written\nones.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Comments should be as readable as narrative text, with\nproper capitalization and punctuation. In many cases,\ncomplete sentences are more readable than sentence\nfragments. Shorter comments, such as comments at the end\nof a line of code, can sometimes be less formal, but you\nshould be consistent with your style.</p>\n<p>Although it can be frustrating to have a code reviewer\npoint out that you are using a comma when you should be\nusing a semicolon, it is very important that source code\nmaintain a high level of clarity and readability. Proper\npunctuation, spelling, and grammar help with that\ngoal.</p>\n</div>\n\n'
p209
sbag2
(g3
g4
NtRp210
(dp211
g7
S'\n<h3 id="TODO_Comments">TODO Comments</h3>\n\n\n<div class="summary">\n<p>Use <code>TODO</code> comments for code that is temporary,\na short-term solution, or good-enough but not perfect.</p>\n</div>\n\n\n<div class="stylebody">\n<p><code>TODO</code>s should include the string\n<code>TODO</code> in all caps, followed by the\n\nname, e-mail address, or other\nidentifier of the person\n with the best context\nabout the problem referenced by the <code>TODO</code>. The\nmain purpose is to have a consistent <code>TODO</code> that\ncan be searched to find out how to get more details upon\nrequest. A <code>TODO</code> is not a commitment that the\nperson referenced will fix the problem. Thus when you create\na <code>TODO</code>, it is almost always your\n\nname\nthat is given.</p>\n<div>\n<pre>// TODO(kl@gmail.com): Use a "*" here for concatenation operator.\n// TODO(Zeke) change this to use relations.\n</pre>\n</div>\n<p>If your <code>TODO</code> is of the form "At a future\ndate do something" make sure that you either include a\nvery specific date ("Fix by November 2005") or a very\nspecific event ("Remove this code when all clients can\nhandle XML responses.").</p>\n</div>\n\n'
p212
sbag2
(g3
g4
NtRp213
(dp214
g7
S'\n<h3 id="Deprecation_Comments">Deprecation Comments</h3>\n\n\n<div class="summary">\n<p>Mark deprecated interface points with <code>DEPRECATED</code>\ncomments.</p>\n</div>\n\n\n<div class="stylebody">\n<p>You can mark an interface as deprecated by writing a\ncomment containing the word <code>DEPRECATED</code> in\nall caps. The comment goes either before the declaration\nof the interface or on the same line as the\ndeclaration.</p>\n<p>After the word\n<code>DEPRECATED</code>, write your name, e-mail address,\nor other identifier in parentheses.</p>\n<p>A deprecation comment must include simple, clear\ndirections for people to fix their callsites. In C++, you\ncan implement a deprecated function as an inline function\nthat calls the new interface point.</p>\n<p>Marking an interface point <code>DEPRECATED</code>\nwill not magically cause any callsites to change. If you\nwant people to actually stop using the deprecated\nfacility, you will have to fix the callsites yourself or\nrecruit a crew to help you.</p>\n<p>New code should not contain calls to deprecated\ninterface points. Use the new interface point instead. If\nyou cannot understand the directions, find the person who\ncreated the deprecation and ask them for help using the\nnew interface point.</p>\n</div>\n\n'
p215
sbag2
(g3
g4
NtRp216
(dp217
g7
S'\n<h2 id="Formatting">Formatting</h2>\n\n\n<p>Coding style and formatting are pretty arbitrary, but a\n\nproject is much easier to follow\nif everyone uses the same style. Individuals may not agree with every\naspect of the formatting rules, and some of the rules may take\nsome getting used to, but it is important that all\n\nproject contributors follow the\nstyle rules so that \nthey can all read and understand\neveryone\'s code easily.</p>\n\n\n<p>To help you format code correctly, we\'ve\ncreated a\n<a href="http://google-styleguide.googlecode.com/svn/trunk/google-c-style.el">\nsettings file for emacs</a>.</p>\n\n\n<h3 id="Line_Length">Line Length</h3>\n\n\n<div class="summary">\n<p>Each line of text in your code should be at most 80\ncharacters long.</p>\n</div>\n\n\n<div class="stylebody">\n<p>We recognize that this rule is\ncontroversial, but so much existing code already adheres\nto it, and we feel that consistency is important.</p>\n<div class="pros">\n<p>Those who favor  this rule\nargue that it is rude to force them to resize\ntheir windows and there is no need for anything longer.\nSome folks are used to having several code windows\nside-by-side, and thus don\'t have room to widen their\nwindows in any case. People set up their work environment\nassuming a particular maximum window width, and 80\ncolumns has been the traditional standard. Why change\nit?</p>\n</div>\n<div class="cons">\n<p>Proponents of change argue that a wider line can make\ncode more readable. The 80-column limit is an hidebound\nthrowback to 1960s mainframes;  modern equipment has wide screens that\ncan easily show longer lines.</p>\n</div>\n<div class="decision">\n<p> 80 characters is the maximum.</p>\n<p class="exception">If a comment line contains an example\ncommand or a literal URL longer than 80 characters, that\nline may be longer than 80 characters for ease of cut and\npaste.</p>\n<p class="exception">A raw-string literal may have content\nthat exceeds 80 characters.  Except for test code, such literals\nshould appear near top of a file.</p>\n<p class="exception">An <code>#include</code> statement with a\nlong path may exceed 80 columns.</p>\n<p class="exception">You needn\'t be concerned about\n<a href="#The__define_Guard">header guards</a> that exceed\nthe maximum length. </p>\n</div>\n</div>\n\n'
p218
sbag2
(g3
g4
NtRp219
(dp220
g7
S'\n<h3 id="Non-ASCII_Characters">Non-ASCII Characters</h3>\n\n\n<div class="summary">\n<p>Non-ASCII characters should be rare, and must use UTF-8\nformatting.</p>\n</div>\n\n\n<div class="stylebody">\n<p>You shouldn\'t hard-code user-facing text in source,\neven English, so use of non-ASCII characters should be\nrare. However, in certain cases it is appropriate to\ninclude such words in your code. For example, if your\ncode parses data files from foreign sources, it may be\nappropriate to hard-code the non-ASCII string(s) used in\nthose data files as delimiters. More commonly, unittest\ncode (which does not  need to be localized) might\ncontain non-ASCII strings. In such cases, you should use\nUTF-8, since that is  an encoding\nunderstood by most tools able to handle more than just\nASCII.</p>\n<p>Hex encoding is also OK, and encouraged where it\nenhances readability \xe2\x80\x94 for example,\n<code>"\\xEF\\xBB\\xBF"</code>, or, even more simply,\n<code>u8"\\uFEFF"</code>, is the Unicode zero-width\nno-break space character, which would be invisible if\nincluded in the source as straight UTF-8.</p>\n<p>Use the <code>u8</code> prefix\nto guarantee that a string literal containing\n<code>\\uXXXX</code> escape sequences is encoded as UTF-8.\nDo not use it for strings containing non-ASCII characters\nencoded as UTF-8, because that will produce incorrect\noutput if the compiler does not interpret the source file\nas UTF-8. </p>\n<p>You shouldn\'t use the C++11 <code>char16_t</code> and\n<code>char32_t</code> character types, since they\'re for\nnon-UTF-8 text. For similar reasons you also shouldn\'t\nuse <code>wchar_t</code> (unless you\'re writing code that\ninteracts with the Windows API, which uses\n<code>wchar_t</code> extensively).</p>\n</div>\n\n'
p221
sbag2
(g3
g4
NtRp222
(dp223
g7
S'\n<h3 id="Spaces_vs._Tabs">Spaces vs. Tabs</h3>\n\n\n<div class="summary">\n<p>Use only spaces, and indent 2 spaces at a time.</p>\n</div>\n\n\n<div class="stylebody">\n<p>We use spaces for indentation. Do not use tabs in your\ncode. You should set your editor to emit spaces when you\nhit the tab key.</p>\n</div>\n\n'
p224
sbag2
(g3
g4
NtRp225
(dp226
g7
S'\n<h3 id="Function_Declarations_and_Definitions">Function Declarations and Definitions</h3>\n\n\n<div class="summary">\n<p>Return type on the same line as function name, parameters\non the same line if they fit. Wrap parameter lists which do\nnot fit on a single line as you would wrap arguments in a\nfunction call.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Functions look like this:</p>\n<pre>ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {\n  DoSomething();\n  ...\n}\n</pre>\n<p>If you have too much text to fit on one line:</p>\n<pre>ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,\n                                             Type par_name3) {\n  DoSomething();\n  ...\n}\n</pre>\n<p>or if you cannot fit even the first parameter:</p>\n<pre>ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n    Type par_name1,  // 4 space indent\n    Type par_name2,\n    Type par_name3) {\n  DoSomething();  // 2 space indent\n  ...\n}\n</pre>\n<p>Some points to note:</p>\n<ul>\n<li>If you cannot fit the return type and the function\n  name on a single line, break between them.</li>\n<li>If you break after the return type of a function\n  declaration or definition, do not indent.</li>\n<li>The open parenthesis is always on the same line as\n  the function name.</li>\n<li>There is never a space between the function name\n  and the open parenthesis.</li>\n<li>There is never a space between the parentheses and\n  the parameters.</li>\n<li>The open curly brace is always at the end of the\n  same line as the last parameter.</li>\n<li>The close curly brace is either on the last line by\n  itself or (if other style rules permit) on the same\n  line as the open curly brace.</li>\n<li>There should be a space between the close\n  parenthesis and the open curly brace.</li>\n<li>All parameters should be named, with identical\n  names in the declaration and implementation.</li>\n<li>All parameters should be aligned if possible.</li>\n<li>Default indentation is 2 spaces.</li>\n<li>Wrapped parameters have a 4 space indent.</li>\n</ul>\n<p>If some parameters are unused, comment out the\nvariable name in the function definition:</p>\n<pre>// Always have named parameters in interfaces.\nclass Shape {\n public:\n  virtual void Rotate(double radians) = 0;\n};\n\n// Always have named parameters in the declaration.\nclass Circle : public Shape {\n public:\n  virtual void Rotate(double radians);\n};\n\n// Comment out unused named parameters in definitions.\nvoid Circle::Rotate(double /*radians*/) {}\n</pre>\n<pre class="badcode">// Bad - if someone wants to implement later, it\'s not clear what the\n// variable means.\nvoid Circle::Rotate(double) {}\n</pre>\n</div>\n\n'
p227
sbag2
(g3
g4
NtRp228
(dp229
g7
S'\n<h3 id="Formatting_Lambda_Expressions">Lambda Expressions</h3>\n\n\n<div class="summary">\n<p>Format parameters and bodies as for any other function, and capture\nlists like other comma-separated lists.</p>\n</div>\n\n\n<div class="stylebody">\n<p>For by-reference captures, do not leave a space between the\nampersand (&amp;) and the variable name.</p>\n<pre>int x = 0;\nauto add_to_x = [&amp;x](int n) { x += n; };\n</pre>\n<p>Short lambdas may be written inline as function arguments.</p>\n<pre>std::set&lt;int&gt; blacklist = {7, 8, 9};\nstd::vector&lt;int&gt; digits = {3, 9, 1, 8, 4, 7, 1};\ndigits.erase(std::remove_if(digits.begin(), digits.end(), [&amp;blacklist](int i) {\n               return blacklist.find(i) != blacklist.end();\n             }),\n             digits.end());\n</pre>\n</div>\n\n'
p230
sbag2
(g3
g4
NtRp231
(dp232
g7
S'\n<h3 id="Function_Calls">Function Calls</h3>\n\n\n<div class="summary">\n<p>Either write the call all on a single line, wrap the\narguments at the parenthesis, or start the arguments on a new\nline indented by four spaces and continue at that 4 space\nindent. In the absence of other considerations, use the\nminimum number of lines, including placing multiple arguments\non each line where appropriate.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Function calls have the following format:</p>\n<pre>bool retval = DoSomething(argument1, argument2, argument3);\n</pre>\n<p>If the arguments do not all fit on one line, they\nshould be broken up onto multiple lines, with each\nsubsequent line aligned with the first argument. Do not\nadd spaces after the open paren or before the close\nparen:</p>\n<pre>bool retval = DoSomething(averyveryveryverylongargument1,\n                          argument2, argument3);\n</pre>\n<p>Arguments may optionally all be placed on subsequent\nlines with a four space indent:</p>\n<pre>if (...) {\n  ...\n  ...\n  if (...) {\n    DoSomething(\n        argument1, argument2,  // 4 space indent\n        argument3, argument4);\n  }\n</pre>\n<p>Put multiple arguments on a single line to reduce the\nnumber of lines necessary for calling a function unless\nthere is a specific readability problem. Some find that\nformatting with strictly one argument on each line is\nmore readable and simplifies editing of the arguments.\nHowever, we prioritize for the reader over the ease of\nediting arguments, and most readability problems are\nbetter addressed with the following techniques.</p>\n<p>If having multiple arguments in a single line decreases\nreadability due to the complexity or confusing nature of the\nexpressions that make up some arguments, try creating\nvariables that capture those arguments in a descriptive name:</p>\n<pre>int my_heuristic = scores[x] * y + bases[x];\nbool retval = DoSomething(my_heuristic, x, y, z);\n</pre>\n<p>Or put the confusing argument on its own line with\nan explanatory comment:</p>\n<pre>bool retval = DoSomething(scores[x] * y + bases[x],  // Score heuristic.\n                          x, y, z);\n</pre>\n<p>If there is still a case where one argument is\nsignificantly more readable on its own line, then put it on\nits own line. The decision should be specific to the argument\nwhich is made more readable rather than a general policy.</p>\n<p>Sometimes arguments form a structure that is important\nfor readability. In those cases, feel free to format the\narguments according to that structure:</p>\n<pre>// Transform the widget by a 3x3 matrix.\nmy_widget.Transform(x1, x2, x3,\n                    y1, y2, y3,\n                    z1, z2, z3);\n</pre>\n</div>\n\n'
p233
sbag2
(g3
g4
NtRp234
(dp235
g7
S'\n<h3 id="Braced_Initializer_List_Format">Braced Initializer List Format</h3>\n\n\n<div class="summary">\n<p>Format a <a href="#Braced_Initializer_List">braced initializer list</a>\nexactly like you would format a function call in its place.</p>\n</div>\n\n\n<div class="stylebody">\n<p>If the braced list follows a name (e.g. a type or\nvariable name), format as if the <code>{}</code> were the\nparentheses of a function call with that name. If there\nis no name, assume a zero-length name.</p>\n<pre>// Examples of braced init list on a single line.\nreturn {foo, bar};\nfunctioncall({foo, bar});\npair&lt;int, int&gt; p{foo, bar};\n\n// When you have to wrap.\nSomeFunction(\n    {"assume a zero-length name before {"},\n    some_other_function_parameter);\nSomeType variable{\n    some, other, values,\n    {"assume a zero-length name before {"},\n    SomeOtherType{\n        "Very long string requiring the surrounding breaks.",\n        some, other values},\n    SomeOtherType{"Slightly shorter string",\n                  some, other, values}};\nSomeType variable{\n    "This is too long to fit all in one line"};\nMyType m = {  // Here, you could also break before {.\n    superlongvariablename1,\n    superlongvariablename2,\n    {short, interior, list},\n    {interiorwrappinglist,\n     interiorwrappinglist2}};\n</pre>\n</div>\n\n'
p236
sbag2
(g3
g4
NtRp237
(dp238
g7
S'\n<h3 id="Conditionals">Conditionals</h3>\n\n\n<div class="summary">\n<p>Prefer no spaces inside parentheses. The <code>if</code>\nand <code>else</code> keywords belong on separate lines.</p>\n</div>\n\n\n<div class="stylebody">\n<p>There are two acceptable formats for a basic\nconditional statement. One includes spaces between the\nparentheses and the condition, and one does not.</p>\n<p>The most common form is without spaces. Either is\nfine, but <em>be consistent</em>. If you are modifying a\nfile, use the format that is already present. If you are\nwriting new code, use the format that the other files in\nthat directory or project use. If in doubt and you have\nno personal preference, do not add the spaces.</p>\n<pre>if (condition) {  // no spaces inside parentheses\n  ...  // 2 space indent.\n} else if (...) {  // The else goes on the same line as the closing brace.\n  ...\n} else {\n  ...\n}\n</pre>\n<p>If you prefer you may add spaces inside the\nparentheses:</p>\n<pre>if ( condition ) {  // spaces inside parentheses - rare\n  ...  // 2 space indent.\n} else {  // The else goes on the same line as the closing brace.\n  ...\n}\n</pre>\n<p>Note that in all cases you must have a space between\nthe <code>if</code> and the open parenthesis. You must\nalso have a space between the close parenthesis and the\ncurly brace, if you\'re using one.</p>\n<pre class="badcode">if(condition) {   // Bad - space missing after IF.\nif (condition){   // Bad - space missing before {.\nif(condition){    // Doubly bad.\n</pre>\n<pre>if (condition) {  // Good - proper space after IF and before {.\n</pre>\n<p>Short conditional statements may be written on one\nline if this enhances readability. You may use this only\nwhen the line is brief and the statement does not use the\n<code>else</code> clause.</p>\n<pre>if (x == kFoo) return new Foo();\nif (x == kBar) return new Bar();\n</pre>\n<p>This is not allowed when the if statement has an\n<code>else</code>:</p>\n<pre class="badcode">// Not allowed - IF statement on one line when there is an ELSE clause\nif (x) DoThis();\nelse DoThat();\n</pre>\n<p>In general, curly braces are not required for\nsingle-line statements, but they are allowed if you like\nthem; conditional or loop statements with complex\nconditions or statements may be more readable with curly\nbraces. Some \nprojects require that an\n<code>if</code> must always always have an accompanying\nbrace.</p>\n<pre>if (condition)\n  DoSomething();  // 2 space indent.\n\nif (condition) {\n  DoSomething();  // 2 space indent.\n}\n</pre>\n<p>However, if one part of an\n<code>if</code>-<code>else</code> statement uses curly\nbraces, the other part must too:</p>\n<pre class="badcode">// Not allowed - curly on IF but not ELSE\nif (condition) {\n  foo;\n} else\n  bar;\n\n// Not allowed - curly on ELSE but not IF\nif (condition)\n  foo;\nelse {\n  bar;\n}\n</pre>\n<pre>// Curly braces around both IF and ELSE required because\n// one of the clauses used braces.\nif (condition) {\n  foo;\n} else {\n  bar;\n}\n</pre>\n</div>\n\n'
p239
sbag2
(g3
g4
NtRp240
(dp241
g7
S'\n<h3 id="Loops_and_Switch_Statements">Loops and Switch Statements</h3>\n\n\n<div class="summary">\n<p>Switch statements may use braces for blocks. Annotate\nnon-trivial fall-through between cases.\nBraces are optional for single-statement loops.\nEmpty loop bodies should use <code>{}</code> or <code>continue</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p><code>case</code> blocks in <code>switch</code>\nstatements can have curly braces or not, depending on\nyour preference. If you do include curly braces they\nshould be placed as shown below.</p>\n<p>If not conditional on an enumerated value, switch\nstatements should always have a <code>default</code> case\n(in the case of an enumerated value, the compiler will\nwarn you if any values are not handled). If the default\ncase should never execute, simply\n<code>assert</code>:</p>\n<div>\n<pre>switch (var) {\n  case 0: {  // 2 space indent\n    ...      // 4 space indent\n    break;\n  }\n  case 1: {\n    ...\n    break;\n  }\n  default: {\n    assert(false);\n  }\n}\n</pre>\n</div>\n<p> Braces are optional for single-statement loops.</p>\n<pre>for (int i = 0; i &lt; kSomeNumber; ++i)\n  printf("I love you\\n");\n\nfor (int i = 0; i &lt; kSomeNumber; ++i) {\n  printf("I take it back\\n");\n}\n</pre>\n<p>Empty loop bodies should use <code>{}</code> or\n<code>continue</code>, but not a single semicolon.</p>\n<pre>while (condition) {\n  // Repeat test until it returns false.\n}\nfor (int i = 0; i &lt; kSomeNumber; ++i) {}  // Good - empty body.\nwhile (condition) continue;  // Good - continue indicates no logic.\n</pre>\n<pre class="badcode">while (condition);  // Bad - looks like part of do/while loop.\n</pre>\n</div>\n\n'
p242
sbag2
(g3
g4
NtRp243
(dp244
g7
S'\n<h3 id="Pointer_and_Reference_Expressions">Pointer and Reference Expressions</h3>\n\n\n<div class="summary">\n<p>No spaces around period or arrow. Pointer operators do not\nhave trailing spaces.</p>\n</div>\n\n\n<div class="stylebody">\n<p>The following are examples of correctly-formatted\npointer and reference expressions:</p>\n<pre>x = *p;\np = &amp;x;\nx = r.y;\nx = r-&gt;y;\n</pre>\n<p>Note that:</p>\n<ul>\n<li>There are no spaces around the period or arrow when\n  accessing a member.</li>\n<li>Pointer operators have no space after the\n   <code>*</code> or <code>&amp;</code>.</li>\n</ul>\n<p>When declaring a pointer variable or argument, you may\nplace the asterisk adjacent to either the type or to the\nvariable name:</p>\n<pre>// These are fine, space preceding.\nchar *c;\nconst string &amp;str;\n\n// These are fine, space following.\nchar* c;    // but remember to do "char* c, *d, *e, ...;"!\nconst string&amp; str;\n</pre>\n<pre class="badcode">char * c;  // Bad - spaces on both sides of *\nconst string &amp; str;  // Bad - spaces on both sides of &amp;\n</pre>\n<p>You should do this consistently within a single\nfile,\nso, when modifying an existing file, use the style in\nthat file.</p>\n</div>\n\n'
p245
sbag2
(g3
g4
NtRp246
(dp247
g7
S'\n<h3 id="Boolean_Expressions">Boolean Expressions</h3>\n\n\n<div class="summary">\n<p>When you have a boolean expression that is longer than the\n<a href="#Line_Length">standard line length</a>, be\nconsistent in how you break up the lines.</p>\n</div>\n\n\n<div class="stylebody">\n<p>In this example, the logical AND operator is always at\nthe end of the lines:</p>\n<pre>if (this_one_thing &gt; this_other_thing &amp;&amp;\n    a_third_thing == a_fourth_thing &amp;&amp;\n    yet_another &amp;&amp; last_one) {\n  ...\n}\n</pre>\n<p>Note that when the code wraps in this example, both of\nthe <code>&amp;&amp;</code> logical AND operators are at\nthe end of the line. This is more common in Google code,\nthough wrapping all operators at the beginning of the\nline is also allowed. Feel free to insert extra\nparentheses judiciously because they can be very helpful\nin increasing readability when used\nappropriately. Also note that you should always use\nthe punctuation operators, such as\n<code>&amp;&amp;</code> and <code>~</code>, rather than\nthe word operators, such as <code>and</code> and\n<code>compl</code>.</p>\n</div>\n\n'
p248
sbag2
(g3
g4
NtRp249
(dp250
g7
S'\n<h3 id="Return_Values">Return Values</h3>\n\n\n<div class="summary">\n<p>Do not needlessly surround the <code>return</code>\nexpression with parentheses.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Use parentheses in <code>return expr;</code> only\nwhere you would use them in <code>x = expr;</code>.</p>\n<pre>return result;                  // No parentheses in the simple case.\n// Parentheses OK to make a complex expression more readable.\nreturn (some_long_condition &amp;&amp;\n        another_condition);\n</pre>\n<pre class="badcode">return (value);                // You wouldn\'t write var = (value);\nreturn(result);                // return is not a function!\n</pre>\n</div>\n\n'
p251
sbag2
(g3
g4
NtRp252
(dp253
g7
S'\n<h3 id="Variable_and_Array_Initialization">Variable and Array Initialization</h3>\n\n\n<div class="summary">\n<p>Your choice of <code>=</code>, <code>()</code>, or\n<code>{}</code>.</p>\n</div>\n\n\n<div class="stylebody">\n<p>You may choose between <code>=</code>,\n<code>()</code>, and <code>{}</code>; the following are\nall correct:</p>\n<pre>int x = 3;\nint x(3);\nint x{3};\nstring name = "Some Name";\nstring name("Some Name");\nstring name{"Some Name"};\n</pre>\n<p>Be careful when using a braced initialization list <code>{...}</code>\non a type with an <code>std::initializer_list</code> constructor.\nA nonempty <i>braced-init-list</i> prefers the\n<code>std::initializer_list</code> constructor whenever\npossible. Note that empty braces <code>{}</code> are special, and\nwill call a default constructor if available. To force the\nnon-<code>std::initializer_list</code> constructor, use parentheses\ninstead of braces.</p>\n<pre>vector&lt;int&gt; v(100, 1);  // A vector of 100 1s.\nvector&lt;int&gt; v{100, 1};  // A vector of 100, 1.\n</pre>\n<p>Also, the brace form prevents narrowing of integral\ntypes. This can prevent some types of programming\nerrors.</p>\n<pre>int pi(3.14);  // OK -- pi == 3.\nint pi{3.14};  // Compile error: narrowing conversion.\n</pre>\n</div>\n\n'
p254
sbag2
(g3
g4
NtRp255
(dp256
g7
S'\n<h3 id="Preprocessor_Directives">Preprocessor Directives</h3>\n\n\n<div class="summary">\n<p>The hash mark that starts a preprocessor directive should\nalways be at the beginning of the line.</p>\n</div>\n\n\n<div class="stylebody">\n<p>Even when preprocessor directives are within the body\nof indented code, the directives should start at the\nbeginning of the line.</p>\n<pre>// Good - directives at beginning of line\n  if (lopsided_score) {\n#if DISASTER_PENDING      // Correct -- Starts at beginning of line\n    DropEverything();\n# if NOTIFY               // OK but not required -- Spaces after #\n    NotifyClient();\n# endif\n#endif\n    BackToNormal();\n  }\n</pre>\n<pre class="badcode">// Bad - indented directives\n  if (lopsided_score) {\n    #if DISASTER_PENDING  // Wrong!  The "#if" should be at beginning of line\n    DropEverything();\n    #endif                // Wrong!  Do not indent "#endif"\n    BackToNormal();\n  }\n</pre>\n</div>\n\n'
p257
sbag2
(g3
g4
NtRp258
(dp259
g7
S'\n<h3 id="Class_Format">Class Format</h3>\n\n\n<div class="summary">\n<p>Sections in <code>public</code>, <code>protected</code> and\n<code>private</code> order, each indented one space.</p>\n</div>\n\n\n<div class="stylebody">\n<p>The basic format for a class declaration (lacking the\ncomments, see <a href="#Class_Comments">Class\nComments</a> for a discussion of what comments are\nneeded) is:</p>\n<pre>class MyClass : public OtherClass {\n public:      // Note the 1 space indent!\n  MyClass();  // Regular 2 space indent.\n  explicit MyClass(int var);\n  ~MyClass() {}\n\n  void SomeFunction();\n  void SomeFunctionThatDoesNothing() {\n  }\n\n  void set_some_var(int var) { some_var_ = var; }\n  int some_var() const { return some_var_; }\n\n private:\n  bool SomeInternalFunction();\n\n  int some_var_;\n  int some_other_var_;\n};\n</pre>\n<p>Things to note:</p>\n<ul>\n<li>Any base class name should be on the same line as\n  the subclass name, subject to the 80-column limit.</li>\n<li>The <code>public:</code>, <code>protected:</code>,\n  and <code>private:</code> keywords should be indented\n  one space.</li>\n<li>Except for the first instance, these keywords\n  should be preceded by a blank line. This rule is\n  optional in small classes.</li>\n<li>Do not leave a blank line after these\n  keywords.</li>\n<li>The <code>public</code> section should be first,\n  followed by the <code>protected</code> and finally the\n  <code>private</code> section.</li>\n<li>See <a href="#Declaration_Order">Declaration\n  Order</a> for rules on ordering declarations within\n  each of these sections.</li>\n</ul>\n</div>\n\n'
p260
sbag2
(g3
g4
NtRp261
(dp262
g7
S'\n<h3 id="Constructor_Initializer_Lists">Constructor Initializer Lists</h3>\n\n\n<div class="summary">\n<p>Constructor initializer lists can be all on one line or\nwith subsequent lines indented four spaces.</p>\n</div>\n\n\n<div class="stylebody">\n<p>There are two acceptable formats for initializer\nlists:</p>\n<pre>// When it all fits on one line:\nMyClass::MyClass(int var) : some_var_(var), some_other_var_(var + 1) {}\n</pre>\n<p>or</p>\n<pre>// When it requires multiple lines, indent 4 spaces, putting the colon on\n// the first initializer line:\nMyClass::MyClass(int var)\n    : some_var_(var),             // 4 space indent\n      some_other_var_(var + 1) {  // lined up\n  ...\n  DoSomething();\n  ...\n}\n</pre>\n</div>\n\n'
p263
sbag2
(g3
g4
NtRp264
(dp265
g7
S'\n<h3 id="Namespace_Formatting">Namespace Formatting</h3>\n\n\n<div class="summary">\n<p>The contents of namespaces are not indented.</p>\n</div>\n\n\n<div class="stylebody">\n<p><a href="#Namespaces">Namespaces</a> do not add an\nextra level of indentation. For example, use:</p>\n<pre>namespace {\n\nvoid foo() {  // Correct.  No extra indentation within namespace.\n  ...\n}\n\n}  // namespace\n</pre>\n<p>Do not indent within a namespace:</p>\n<pre class="badcode">namespace {\n\n  // Wrong.  Indented when it should not be.\n  void foo() {\n    ...\n  }\n\n}  // namespace\n</pre>\n<p>When declaring nested namespaces, put each namespace\non its own line.</p>\n<pre>namespace foo {\nnamespace bar {\n</pre>\n</div>\n\n'
p266
sbag2
(g3
g4
NtRp267
(dp268
g7
S'\n<h3 id="Horizontal_Whitespace">Horizontal Whitespace</h3>\n\n\n<div class="summary">\n<p>Use of horizontal whitespace depends on location. Never put\ntrailing whitespace at the end of a line.</p>\n</div>\n\n\n<div class="stylebody">\n<h4 class="stylepoint_subsection">General</h4>\n<pre>void f(bool b) {  // Open braces should always have a space before them.\n  ...\nint i = 0;  // Semicolons usually have no space before them.\n// Spaces inside braces for braced-init-list are optional.  If you use them,\n// put them on both sides!\nint x[] = { 0 };\nint x[] = {0};\n\n// Spaces around the colon in inheritance and initializer lists.\nclass Foo : public Bar {\n public:\n  // For inline function implementations, put spaces between the braces\n  // and the implementation itself.\n  Foo(int b) : Bar(), baz_(b) {}  // No spaces inside empty braces.\n  void Reset() { baz_ = 0; }  // Spaces separating braces from implementation.\n  ...\n</pre>\n<p>Adding trailing whitespace can cause extra work for\nothers editing the same file, when they merge, as can\nremoving existing trailing whitespace. So: Don\'t\nintroduce trailing whitespace. Remove it if you\'re\nalready changing that line, or do it in a separate\nclean-up \noperation (preferably when no-one\nelse is working on the file).</p>\n<h4 class="stylepoint_subsection">Loops and Conditionals</h4>\n<pre>if (b) {          // Space after the keyword in conditions and loops.\n} else {          // Spaces around else.\n}\nwhile (test) {}   // There is usually no space inside parentheses.\nswitch (i) {\nfor (int i = 0; i &lt; 5; ++i) {\n// Loops and conditions may have spaces inside parentheses, but this\n// is rare.  Be consistent.\nswitch ( i ) {\nif ( test ) {\nfor ( int i = 0; i &lt; 5; ++i ) {\n// For loops always have a space after the semicolon.  They may have a space\n// before the semicolon, but this is rare.\nfor ( ; i &lt; 5 ; ++i) {\n  ...\n\n// Range-based for loops always have a space before and after the colon.\nfor (auto x : counts) {\n  ...\n}\nswitch (i) {\n  case 1:         // No space before colon in a switch case.\n    ...\n  case 2: break;  // Use a space after a colon if there\'s code after it.\n</pre>\n<h4 class="stylepoint_subsection">Operators</h4>\n<pre>// Assignment operators always have spaces around them.\nx = 0;\n\n// Other binary operators usually have spaces around them, but it\'s\n// OK to remove spaces around factors.  Parentheses should have no\n// internal padding.\nv = w * x + y / z;\nv = w*x + y/z;\nv = w * (x + z);\n\n// No spaces separating unary operators and their arguments.\nx = -5;\n++x;\nif (x &amp;&amp; !y)\n  ...\n</pre>\n<h4 class="stylepoint_subsection">Templates and Casts</h4>\n<pre>// No spaces inside the angle brackets (&lt; and &gt;), before\n// &lt;, or between &gt;( in a cast\nvector&lt;string&gt; x;\ny = static_cast&lt;char*&gt;(x);\n\n// Spaces between type and pointer are OK, but be consistent.\nvector&lt;char *&gt; x;\nset&lt;list&lt;string&gt;&gt; x;        // Permitted in C++11 code.\nset&lt;list&lt;string&gt; &gt; x;       // C++03 required a space in &gt; &gt;.\n\n// You may optionally use symmetric spacing in &lt; &lt;.\nset&lt; list&lt;string&gt; &gt; x;\n</pre>\n</div>\n\n'
p269
sbag2
(g3
g4
NtRp270
(dp271
g7
S'\n<h3 id="Vertical_Whitespace">Vertical Whitespace</h3>\n\n\n<div class="summary">\n<p>Minimize use of vertical whitespace.</p>\n</div>\n\n\n<div class="stylebody">\n<p>This is more a principle than a rule: don\'t use blank\nlines when you don\'t have to. In particular, don\'t put\nmore than one or two blank lines between functions,\nresist starting functions with a blank line, don\'t end\nfunctions with a blank line, and be discriminating with\nyour use of blank lines inside functions.</p>\n<p>The basic principle is: The more code that fits on one\nscreen, the easier it is to follow and understand the\ncontrol flow of the program. Of course, readability can\nsuffer from code being too dense as well as too spread\nout, so use your judgement. But in general, minimize use\nof vertical whitespace.</p>\n<p>Some rules of thumb to help when blank lines may be\nuseful:</p>\n<ul>\n<li>Blank lines at the beginning or end of a function\n  very rarely help readability.</li>\n<li>Blank lines inside a chain of if-else blocks may\n  well help readability.</li>\n</ul>\n</div>\n\n'
p272
sbag2
(g3
g4
NtRp273
(dp274
g7
S'\n<h2 id="Exceptions_to_the_Rules">Exceptions to the Rules</h2>\n\n\n<p>The coding conventions described above are mandatory.\nHowever, like all good rules, these sometimes have exceptions,\nwhich we discuss here.</p>\n\n\n<h3 id="Existing_Non-conformant_Code">Existing Non-conformant Code</h3>\n\n\n<div class="summary">\n<p>You may diverge from the rules when dealing with code that\ndoes not conform to this style guide.</p>\n</div>\n\n\n<div class="stylebody">\n<p>If you find yourself modifying code that was written\nto specifications other than those presented by this\nguide, you may have to diverge from these rules in order\nto stay consistent with the local conventions in that\ncode. If you are in doubt about how to do this, ask the\noriginal author or the person currently responsible for\nthe code. Remember that <em>consistency</em> includes\nlocal consistency, too.</p>\n</div>\n\n'
p275
sbag2
(g3
g4
NtRp276
(dp277
g7
S'\n<h3 id="Windows_Code">Windows Code</h3>\n\n\n<div class="summary">\n<p> Windows\nprogrammers have developed their own set of coding\nconventions, mainly derived from the conventions in Windows\nheaders and other Microsoft code. We want to make it easy\nfor anyone to understand your code, so we have a single set\nof guidelines for everyone writing C++ on any platform.</p>\n</div>\n\n\n<div class="stylebody">\n<p>It is worth reiterating a few of the guidelines that\nyou might forget if you are used to the prevalent Windows\nstyle:</p>\n<ul>\n<li>Do not use Hungarian notation (for example, naming\n  an integer <code>iNum</code>). Use the Google naming\n  conventions, including the <code>.cc</code> extension\n  for source files.</li>\n<li>Windows defines many of its own synonyms for\n  primitive types, such as <code>DWORD</code>,\n  <code>HANDLE</code>, etc. It is perfectly acceptable,\n  and encouraged, that you use these types when calling\n  Windows API functions. Even so, keep as close as you\n  can to the underlying C++ types. For example, use\n  <code>const TCHAR *</code> instead of\n  <code>LPCTSTR</code>.</li>\n<li>When compiling with Microsoft Visual C++, set the\n  compiler to warning level 3 or higher, and treat all\n  warnings as errors.</li>\n<li>Do not use <code>#pragma once</code>; instead use\n  the standard Google include guards. The path in the\n  include guards should be relative to the top of your\n  project tree.</li>\n<li>In fact, do not use any nonstandard extensions,\n  like <code>#pragma</code> and <code>__declspec</code>,\n  unless you absolutely must. Using\n  <code>__declspec(dllimport)</code> and\n  <code>__declspec(dllexport)</code> is allowed; however,\n  you must use them through macros such as\n  <code>DLLIMPORT</code> and <code>DLLEXPORT</code>, so\n  that someone can easily disable the extensions if they\n  share the code.</li>\n</ul>\n<p>However, there are just a few rules that we\noccasionally need to break on Windows:</p>\n<ul>\n<li>Normally we <a href="#Multiple_Inheritance">forbid\n  the use of multiple implementation inheritance</a>;\n  however, it is required when using COM and some ATL/WTL\n  classes. You may use multiple implementation\n  inheritance to implement COM or ATL/WTL classes and\n  interfaces.</li>\n<li>Although you should not use exceptions in your own\n  code, they are used extensively in the ATL and some\n  STLs, including the one that comes with Visual C++.\n  When using the ATL, you should define\n  <code>_ATL_NO_EXCEPTIONS</code> to disable exceptions.\n  You should investigate whether you can also disable\n  exceptions in your STL, but if not, it is OK to turn on\n  exceptions in the compiler. (Note that this is only to\n  get the STL to compile. You should still not write\n  exception handling code yourself.)</li>\n<li>The usual way of working with precompiled headers\n  is to include a header file at the top of each source\n  file, typically with a name like <code>StdAfx.h</code>\n  or <code>precompile.h</code>. To make your code easier\n  to share with other projects, avoid including this file\n  explicitly (except in <code>precompile.cc</code>), and\n  use the <code>/FI</code> compiler option to include the\n  file automatically.</li>\n<li>Resource headers, which are usually named\n  <code>resource.h</code> and contain only macros, do not\n  need to conform to these style guidelines.</li>\n</ul>\n</div>\n\n'
p278
sbag2
(g3
g4
NtRp279
(dp280
g7
S'\n<h2 class="ignoreLink">Parting Words</h2>\n\n\n<p>Use common sense and <em>BE CONSISTENT</em>.</p>\n\n\n<p>If you are editing code, take a few minutes to look at the\ncode around you and determine its style. If they use spaces\naround their <code>if</code> clauses, you should, too. If their\ncomments have little boxes of stars around them, make your\ncomments have little boxes of stars around them too.</p>\n\n\n<p>The point of having style guidelines is to have a common\nvocabulary of coding so people can concentrate on what you are\nsaying, rather than on how you are saying it. We present global\nstyle rules here so people know the vocabulary. But local style\nis also important. If code you add to a file looks drastically\ndifferent from the existing code around it, the discontinuity\nthrows readers out of their rhythm when they go to read it. Try\nto avoid this.</p>\n\n\n<p>OK, enough writing about writing code; the code itself is much\nmore interesting. Have fun!</p>\n\n'
p281
sba.